{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "8f8e1a",
      "Name": "Custom_Model",
      "Transform": {
        "posX": -20.5040188,
        "posY": 3.23150229,
        "posZ": 29.4263954,
        "rotX": 0.000107999622,
        "rotY": 269.988,
        "rotZ": -0.000175452515,
        "scaleX": 1.74999964,
        "scaleY": 1.74999964,
        "scaleZ": 1.74999964
      },
      "Nickname": "New Atlas Box",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/15320077791029603767/7EDC19649C706DD3AB3DE8EAF6AAE9DE0A52B9F9/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/14187297714720825510/660A6191E7D486DD9E51F3A640D786FC7E82BF37/",
        "NormalURL": "",
        "ColliderURL": "https://steamusercontent-a.akamaihd.net/ugc/15320077791029603767/7EDC19649C706DD3AB3DE8EAF6AAE9DE0A52B9F9/",
        "Convex": false,
        "MaterialIndex": 1,
        "TypeIndex": 1,
        "CustomShader": {
          "SpecularColor": {
            "r": 0.875,
            "g": 0.812880337,
            "b": 0.7463235
          },
          "SpecularIntensity": 0.05,
          "SpecularSharpness": 3.299998,
          "FresnelStrength": 0.201587722
        },
        "CastShadows": true
      },
      "LuaScript": "-- Bundled by luabundle {\"rootModuleName\":\"New Atlas Box.8f8e1a.lua\",\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"New Atlas Box.8f8e1a.lua\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"src/NewAtlasBox\")\nend)\n__bundle_register(\"src/NewAtlasBox\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- Atlas Box scripts written by harsch and Frack and AdoptedAndy.  Last update:  05-10-2025\r\n\r\nrequire(\"src/Utils/ColorUtils\")\r\nrequire(\"src/Config/GeneralConfig\")\r\nrequire(\"src/Config/AtlasBoxButtons\")\r\nrequire(\"src/Utils/HelperFunctions\")\r\nrequire(\"src/XmlHelper\")\r\n\r\n-- Objects for needed game objects.\r\nlocal objects = {\r\n    atlasBox = nil,\r\n    atlasBoxModel = nil,\r\n    banditBag = nil,\r\n    relicBag = nil,\r\n    relicDeck = nil,\r\n    siteBag = nil,\r\n    table = nil,\r\n    map = nil,\r\n    arcaneEdificeDeck = nil,\r\n    beastEdificeDeck = nil,\r\n    discordEdificeDeck = nil,\r\n    hearthEdificeDeck = nil,\r\n    nomadEdificeDeck = nil,\r\n    orderEdificeDeck = nil,\r\n}\r\n\r\nlocal SITE_PREVIEW = \"SITE PREVIEW\"\r\n\r\nlocal mapTransform = nil\r\nlocal selfTransform = nil\r\nlocal sitePreview = {}\r\nlocal portalPosition = self.getPosition()\r\nlocal retrieveInCooldown = false\r\n\r\n\r\n-- ==============================\r\n-- INITIALIZATION\r\n-- ==============================\r\n\r\nfunction onLoad() \r\n    log('mirror_game ON')\r\n    -- Create all needed tags by adding them to this object and then removing them\r\n    debugLog(\"Adding tags to game\")\r\n    local tagsToAdd = {tags.site, tags.relic, tags.edifice, tags.unlocked, tags.protected, tags.ancient, tags.card, tags.slow}\r\n    for _, tag in ipairs(tagsToAdd) do\r\n        self.addTag(tag)\r\n        self.removeTag(tag)\r\n    end\r\n    \r\n    if not (self.hasTag(tags.debug)) then\r\n        self.addTag(tags.debug)\r\n        self.removeTag(tags.debug)\r\n    end\r\n    debugLog(\"Tags added\")\r\n\r\n    local chronicleExists = self.hasTag(tags.chronicleCreated)\r\n\r\n    debugLog(\"Adding Speed buttons\")\r\n    self.createButton(buttons.speedLabel)\r\n    self.createButton(buttons.speedDisplay)\r\n    self.createButton(buttons.speedUp)\r\n    self.createButton(buttons.speedDown)\r\n    debugLog(\"Speed buttons added\")\r\n    \r\n    -- If the chronicle is already created we can skip setup\r\n    if chronicleExists then\r\n        setupObjects(true)\r\n\r\n        debugLog(\"Adding Atlas Box context menu items and Foundation 9 button\")\r\n        self.addContextMenuItem(\"RUIN and unify Sites\", ruinSites)\r\n        self.addContextMenuItem(\"EXPLORE new Sites\", retrieveRest)\r\n        self.addContextMenuItem(\"REVISIT an old Site\", retrieveBack)\r\n        self.addContextMenuItem(\"EXPLORE a new Site\", retrieveOnce)\r\n        self.addContextMenuItem(\"Retrieve lost Relics\", spawnRelics)\r\n        self.addContextMenuItem(\"Search (Debug)\", search)\r\n        debugLog(\"Atlas Box context menu items added and Foundation 9 button\")\r\n\r\n        refreshRevisitPreview()\r\n    -- If the chronicle is not created we need to spawn setup buttons\r\n    elseif not chronicleExists then\r\n        if setupObjects(false) then\r\n            tagAllItems() -- Tag all items in the bags\r\n            self.createButton(buttons.setup)\r\n        else \r\n            self.createButton(buttons.retry)\r\n        end\r\n    end\r\n\r\n    debugLog(\"Setting up internal Atlas Box Container\")\r\n    -- objects.atlasBox.setLock(true)\r\n    objects.atlasBox.interactable = false\r\n    objects.atlasBox.setPosition(vectorSum(objects.atlasBoxModel.getPosition(), {x=0, y=0, z=2}))\r\n    objects.atlasBox.setRotation(objects.atlasBoxModel.getRotation())\r\n    objects.atlasBoxModel.jointTo(objects.atlasBox, {\r\n        [\"type\"]        = \"Fixed\",\r\n        [\"collision\"]   = false,\r\n        [\"break_force\"]  = 10000000.0,\r\n        [\"break_torgue\"] = 10000000.0,\r\n    })\r\n    debugLog(\"Setting up internal Atlas Box Container complete\")\r\n\r\nend\r\n\r\n-- Validate that setup objects can be found and set them\r\nfunction setupObjects(isChronicleCreated)\r\n    local loadTable = {\r\n        {objectName = \"table\", GUID = GUIDs.table, printableName = \"Table\"},\r\n        {objectName = \"atlasBox\", GUID = GUIDs.atlasBox, printableName = \"Atlas Box Bag\"},\r\n        {objectName = \"atlasBoxModel\", GUID = GUIDs.newAtlasBox, printableName = \"Atlas Box Model\"},\r\n        {objectName = \"map\", GUID = GUIDs.map, printableName = \"Map\"},\r\n        {objectName = \"banditBag\", GUID = GUIDs.banditBag, printableName = \"Bandit Bag\"},\r\n    }\r\n    local setupTable = {\r\n        {objectName = \"arcaneEdificeDeck\", GUID = GUIDs.edificeDecks.Arcane, printableName = \"Arcane Edifice Deck\"},\r\n        {objectName = \"beastEdificeDeck\", GUID = GUIDs.edificeDecks.Beast, printableName = \"Beast Edifice Deck\"},\r\n        {objectName = \"discordEdificeDeck\", GUID = GUIDs.edificeDecks.Discord, printableName = \"Discord Edifice Deck\"},\r\n        {objectName = \"hearthEdificeDeck\", GUID = GUIDs.edificeDecks.Hearth, printableName = \"Hearth Edifice Deck\"},\r\n        {objectName = \"nomadEdificeDeck\", GUID = GUIDs.edificeDecks.Nomad, printableName = \"Nomad Edifice Deck\"},\r\n        {objectName = \"orderEdificeDeck\", GUID = GUIDs.edificeDecks.Order, printableName = \"Order Edifice Deck\"},\r\n        {objectName = \"relicBag\", GUID = GUIDs.relicBag, printableName = \"Relic Bag\"},\r\n        {objectName = \"siteBag\", GUID = GUIDs.siteBag, printableName = \"Site Bag\"},\r\n    }\r\n    local foundAll = true\r\n    \r\n    debugLog(\"Detecting object group 1\")\r\n    for _, loadTable in ipairs(loadTable) do\r\n        objects[loadTable.objectName] = getObjectFromGUID(loadTable.GUID)\r\n        if objects[loadTable.objectName] == nil then\r\n            printToAll(\"ERROR: Cannot find \" .. loadTable.printableName .. \" by GUID\")\r\n            foundAll = false\r\n        end\r\n    end\r\n    debugLog(\"Detecting  object group 1 complete\")\r\n\r\n    if not isChronicleCreated then\r\n        debugLog(\"Detecting setup objects\")\r\n        for _, setupItem in ipairs(setupTable) do\r\n            objects[setupItem.objectName] = getObjectFromGUID(setupItem.GUID)\r\n            if objects[setupItem.objectName] == nil then\r\n                printToAll(\"ERROR: Cannot find \" .. setupItem.printableName .. \" by GUID\")\r\n                foundAll = false\r\n            end\r\n        end\r\n        debugLog(\"Detecting setup objects complete\")\r\n    else\r\n        getEdificeDeck()\r\n        debugLog(\"Detecting site objects and adding context menu items\")\r\n        for _, obj in ipairs(getAllObjects()) do\r\n            if obj.getDescription() == SITE_PREVIEW then\r\n                table.insert(sitePreview, obj)\r\n            end\r\n            if obj.hasTag(tags.site) then\r\n                obj.addContextMenuItem(\"Preserve Site\", markCard)\r\n                obj.addContextMenuItem(\"Allow Site to Ruin\", unMarkCard)\r\n            end\r\n            if obj.getMemo() == \"relicDeck\" then\r\n                objects.relicDeck = obj\r\n            end\r\n        end\r\n        debugLog(\"Detecting site objects and adding context menu items complete\")\r\n    end\r\n    selfTransform = {position = self.getPosition(), rotation = self.getRotation()}\r\n    mapTransform = {position = objects.map.getPosition(), rotation = objects.map.getRotation()}\r\n    return foundAll\r\nend\r\n\r\n-- Remove all buttons\r\nfunction retry()\r\n    removeButtons(buttons.retry)\r\n    onLoad()\r\nend\r\n\r\n-- Tag all items in bags\r\nfunction tagAllItems()\r\n    debugLog(\"Tagging all relics\")\r\n    local bagTags = { \r\n        {bag = objects.relicBag,    tag = tags.relic},\r\n    }\r\n    for _, bagTag in ipairs(bagTags) do\r\n        local bag, tag = bagTag.bag, bagTag.tag\r\n        for _, item in ipairs(bag.getObjects()) do\r\n            bag.putObject(addTagAndReturn(bag.takeObject({guid = item.guid}), tag))\r\n        end\r\n    end\r\n    debugLog(\"Tagging all relics complete\")\r\nend\r\n\r\n-- ==============================\r\n-- CHRONICLE SETUP\r\n-- ==============================\r\n\r\nfunction chronicleSetup(obj, color, alt_click)\r\n    function chronicleSetupCoroutine()\r\n        if not alt_click then\r\n            -- If items are missing we need to retry setup\r\n            if not setupObjects() then\r\n                removeButtons(buttons.setup)\r\n                self.createButton(buttons.retry)\r\n                return\r\n            end\r\n            -- Tag all cards\r\n            printToAll(\"organizing cards...\")\r\n            local decksDone = 0\r\n            debugLog(\"Tagging all archive cards\")\r\n            for _, deck in pairs(getArchiveDecks()) do\r\n                function tagAllCardsInDeck(_deck)\r\n                    local deckSize = #deck.getObjects()\r\n                    for i = deckSize-1, 0, -1 do\r\n                        local card = deck.takeObject({index = i})\r\n                        for i = 0, 1*getSpeedScale() do\r\n                            coroutine.yield(0)\r\n                        end\r\n                        card.addTag(tags.card)\r\n                        for i = 0, 1*getSpeedScale() do\r\n                            coroutine.yield(0)\r\n                        end\r\n                        deck.putObject(card)\r\n                    end\r\n                    decksDone = decksDone+1\r\n                    return 1\r\n                end\r\n                startLuaCoroutine(self, \"tagAllCardsInDeck\")\r\n            end\r\n            debugLog(\"Tagging all archive cards complete\")\r\n            while decksDone < 6 do\r\n                coroutine.yield(0)\r\n            end\r\n            for _, deck in pairs(getArchiveDecks()) do\r\n                deck.setRotation({0,180,180})\r\n                deck.shuffle()\r\n            end\r\n            -- Take all sites and put them in the Atlas Box. Roll a d6 and add additional items depending on the roll\r\n            printToAll(\"creating the world...\")\r\n            debugLog(\"Attaching edifices and enduring tag to homeland sites\")\r\n            for i = 1,  #objects.siteBag.getObjects() do\r\n                local site = getRandomSite()\r\n                for i = 0, 2*getSpeedScale() do\r\n                    coroutine.yield(0)\r\n                end\r\n                for _, tag in ipairs({\"ArcaneHomeland\", \"BeastHomeland\", \"DiscordHomeland\", \"HearthHomeland\", \"NomadHomeland\", \"OrderHomeland\"}) do\r\n                    if getSiteScriptTag(site, tag) == 1 then\r\n                        site.addTag(tags.ancient)\r\n                        local edifice = nil\r\n                        if tag == \"ArcaneHomeland\" then\r\n                            edifice = getRandomObjectFromContainer(objects.arcaneEdificeDeck, false)\r\n                        elseif tag == \"BeastHomeland\" then\r\n                            edifice = getRandomObjectFromContainer(objects.beastEdificeDeck, false)\r\n                        elseif tag == \"DiscordHomeland\" then\r\n                            edifice = getRandomObjectFromContainer(objects.discordEdificeDeck, false)\r\n                        elseif tag == \"HearthHomeland\" then\r\n                            edifice = getRandomObjectFromContainer(objects.hearthEdificeDeck, false)\r\n                        elseif tag == \"NomadHomeland\" then\r\n                            edifice = getRandomObjectFromContainer(objects.nomadEdificeDeck, false)\r\n                        elseif tag == \"OrderHomeland\" then\r\n                            edifice = getRandomObjectFromContainer(objects.orderEdificeDeck, false)\r\n                        end\r\n                        edifice.setPosition(\r\n                            getTransformStruct(\"denizen\",\r\n                            0,\r\n                            { position= site.getPosition(), rotation= site.getRotation()}\r\n                        ).position)\r\n                        site.addAttachment(edifice)\r\n                    end\r\n                end\r\n\r\n                \r\n                if getSiteScriptTag(site, \"Enduring\") == 1 then\r\n                    site.addTag(tags.ancient)\r\n                end\r\n                for i = 0, 1*getSpeedScale() do\r\n                    coroutine.yield(0)\r\n                end\r\n                putSiteIntoAtlasBox(site)\r\n            end\r\n            debugLog(\"Attaching edifices and enduring tag to homeland sites complete\")\r\n\r\n            createRelicDeck()\r\n            destroyObject(objects.relicBag)\r\n\r\n            unifyEdificeDecks()\r\n            \r\n            -- Deal Starting Sites\r\n            debugLog(\"Dealing starting sites\")\r\n            for siteNumber = 1,8 do\r\n                local siteAndAttachments = getFromAtlasBox(0)\r\n                spawnSiteAndAttachmentsAtTransform(siteAndAttachments, getTransformStruct(\"site\", siteNumber, mapTransform), true)\r\n                for i = 0, 1*getSpeedScale() do\r\n                    coroutine.yield(0)\r\n                end\r\n            end\r\n            debugLog(\"Dealing starting sites complete. Destroying site bag\")\r\n            destroyObject(objects.siteBag)\r\n            \r\n            generateNewWorldDeck()\r\n\r\n            debugLog(\"Creating world deck complete. Adding context menu items\")\r\n            self.addTag(tags.chronicleCreated)\r\n            removeButtons(buttons.setup)\r\n            -- createButtons(buttons.retrieve, buttons.spawnRelics, buttons.retrieveBack, buttons.ruinSites,  buttons.unifySites)\r\n            self.addContextMenuItem(\"RUIN and unify Sites\", ruinSites)\r\n            self.addContextMenuItem(\"EXPLORE new Sites\", retrieveRest)\r\n            self.addContextMenuItem(\"REVISIT an old Site\", retrieveBack)\r\n            self.addContextMenuItem(\"EXPLORE a new Site\", retrieveOnce)\r\n            self.addContextMenuItem(\"Retrieve lost Relics\", spawnRelics)\r\n            self.addContextMenuItem(\"Search (Debug)\", search)\r\n            debugLog(\"Adding context menu items complete\")\r\n            refreshRevisitPreview()\r\n            createDispossessed()\r\n            printToAll(\"WORLD DECK SETUP COMPLETE.\")\r\n            \r\n        end\r\n        return 1\r\n    end\r\n    startLuaCoroutine(self, \"chronicleSetupCoroutine\")\r\nend\r\n\r\nfunction generateNewWorldDeck() \r\n    local decks = getArchiveDecks()\r\n    local firstCard = nil\r\n    local worldDeck = nil\r\n    -- add 10 cards from each suit\r\n\r\n    debugLog(\"Creating world deck with 9 cards of each suit\")\r\n    for _, suit in ipairs(suits) do\r\n        local deck = decks[suit]\r\n        for i=1, 10 do\r\n            local newCard = deck.takeObject()\r\n            for i = 0, 1*getSpeedScale() do\r\n                coroutine.yield(0)\r\n            end\r\n            if firstCard == nil then\r\n                local deckPosition = getTransformStruct(\"worldDeck\", 0, mapTransform)\r\n                firstCard = newCard\r\n                firstCard.setPosition(deckPosition.position)\r\n                firstCard.setRotation(deckPosition.rotation)\r\n            elseif worldDeck == nil then\r\n                worldDeck = firstCard.putObject(newCard)\r\n                worldDeck.setName(\"World Deck\")\r\n            else\r\n                worldDeck.putObject(newCard)\r\n            end\r\n        end\r\n    end\r\n    worldDeck.shuffle()\r\n    debugLog(\"Creating world deck complete\")\r\nend\r\n\r\nfunction createRelicDeck()\r\n    local firstRelic = nil\r\n    local relicDeck = nil\r\n    debugLog(\"Creating relic deck\")\r\n    for _, item in ipairs(objects.relicBag.getObjects()) do\r\n        local relic = objects.relicBag.takeObject()\r\n        for i = 0, 1*getSpeedScale() do\r\n            coroutine.yield(0)\r\n        end\r\n        local deckPosition = getTransformStruct(\"relicStack\", 0, mapTransform)\r\n        if firstRelic == nil then\r\n            firstRelic = relic\r\n            firstRelic.setPosition(deckPosition.position)\r\n            firstRelic.setRotation(deckPosition.rotation)\r\n        elseif relicDeck == nil then\r\n            relicDeck = firstRelic.putObject(relic)\r\n            relicDeck.setName(\"Relic Deck\")\r\n            relicDeck.setMemo(\"relicDeck\")\r\n        else\r\n            relicDeck.putObject(relic)\r\n        end\r\n        -- for i = 0, 1*getSpeedScale() do\r\n        --     coroutine.yield(0)\r\n        -- end\r\n    end\r\n    debugLog(\"Creating relic deck complete\")\r\n    objects.relicDeck = relicDeck\r\nend\r\n\r\nfunction createDispossessed() \r\n    local decks = getArchiveDecks()\r\n    local firstCard = nil\r\n    local dispossessed = nil\r\n    -- add 2 cards from each suit\r\n    debugLog(\"Creating dispossessed deck with 2 cards of each suit\")\r\n    for _, suit in ipairs(suits) do\r\n        local deck = decks[suit]\r\n        for i=1, 2 do\r\n            local newCard = deck.takeObject()\r\n            for i = 0, 1*getSpeedScale() do\r\n                coroutine.yield(0)\r\n            end\r\n            if firstCard == nil then\r\n                local deckPosition = getTransformStruct(\"dispossessed\", 0, mapTransform)\r\n                firstCard = newCard\r\n                firstCard.setPosition(deckPosition.position)\r\n                firstCard.setRotation(deckPosition.rotation)\r\n            elseif dispossessed == nil then\r\n                dispossessed = firstCard.putObject(newCard)\r\n                dispossessed.setName(\"Dispossessed\")\r\n            else\r\n                dispossessed.putObject(newCard)\r\n            end\r\n        end\r\n    end\r\n    debugLog(\"Creating dispossessed deck complete\")\r\nend\r\n\r\n-- Get Elements for creating Chronicle\r\nfunction getRandomSite()\r\n    local site = getRandomObjectFromContainer(objects.siteBag, false)\r\n    site.setRotation({x=0,y=180,z=180})\r\n    return site\r\nend\r\n\r\n\r\n-- ==============================\r\n-- ATLAS BOX STORAGE\r\n-- ==============================\r\n\r\nfunction ruinSites()\r\n    local toStore = {}\r\n    local completedSites = 0\r\n    local storedSites = 0\r\n    function quickStoreCoroutine()\r\n        printToAll(\"ruining and unifying sites...\")\r\n        local i = #toStore\r\n        -- Store the objects in the Atlas Box in the empty slot closest to the frontwa\r\n        local foundEmptyBag = false\r\n        debugLog(\"Storing objects in Atlas Box\")\r\n        for i = 1, #toStore do\r\n            putIntoAtlasBox(toStore[i])\r\n            storedSites = storedSites + 1\r\n        end\r\n        debugLog(\"Storing objects in Atlas Box complete\")\r\n        refreshRevisitPreview()\r\n        unifySites()\r\n        return 1\r\n    end\r\n\r\n    function getRuinableObjectsAtSite(hitObjects, index)\r\n        local isProtected = false\r\n        local isAncient = false\r\n        local protectedSite\r\n\r\n        debugLog(\"Checking for ruinable objects at site \" .. index)\r\n        for _, obj in ipairs(hitObjects) do\r\n            if obj.hasTag(tags.site) then\r\n                obj.setLock(false)\r\n                isProtected = obj.hasTag(tags.protected)\r\n                unMarkCard(_,_,obj)\r\n                if obj.hasTag(tags.ancient) then\r\n                    isAncient = true\r\n                end\r\n                for _, tag in ipairs({\"ArcaneHomeland\", \"BeastHomeland\", \"DiscordHomeland\", \"HearthHomeland\", \"NomadHomeland\", \"OrderHomeland\"}) do\r\n                    if getSiteScriptTag(obj, tag) == 1 then\r\n                        isAncient = true\r\n                    end\r\n                end\r\n            end\r\n        end\r\n        debugLog(\"Checking for ruinable objects at site \" .. index .. \" complete\")\r\n        if not isProtected then\r\n            local toStoreSlot = {}\r\n            debugLog(\"Getting storable objects at site \" .. index)\r\n            for _, obj in ipairs(hitObjects) do\r\n                if (obj.hasTag(tags.site) or obj.hasTag(tags.relic)) then\r\n                    table.insert(toStoreSlot, obj)\r\n                    obj.setRotation({x= obj.getRotation().x, y= roundToNearest180(obj.getRotation().y), z=roundToNearest180(obj.getRotation().z)})\r\n                elseif (obj.hasTag(tags.edifice) and (obj.getRotation().z < 10 or obj.getRotation().z > 350)) then\r\n                    table.insert(toStoreSlot, obj)\r\n                    obj.setRotation({x= obj.getRotation().x, y= roundToNearest180(obj.getRotation().y), z=roundToNearest180(obj.getRotation().z)})\r\n                elseif (obj.hasTag(tags.card) and isAncient) then\r\n                    table.insert(toStoreSlot, obj)\r\n                elseif (obj.hasTag(tags.bandit)) then\r\n                    objects.banditBag.putObject(obj)\r\n                elseif not (obj.getGUID() == GUIDs.map) and\r\n                       not (obj.getGUID() == GUIDs.table) and\r\n                       not (obj.getGUID() == GUIDs.scriptingTrigger) and\r\n                       not (obj.memo == \"trigger\") then\r\n                        if  obj.hasTag(tags.edifice) then\r\n                            if not (nil == getEdificeDeck()) then\r\n                                getEdificeDeck().putObject(obj)\r\n                                getEdificeDeck().shuffle()\r\n                            end\r\n                        end\r\n                    local randomOffset = {\r\n                        x = (math.random() - 0.5) * 15,\r\n                        y = (math.random() - 0.5) * 20,\r\n                        z = (math.random() - 0.5) * 10\r\n                    }\r\n                    obj.setPositionSmooth(vectorSum(vector(73, 10, -5),randomOffset), false, false)\r\n                end\r\n            end\r\n            if #toStoreSlot > 0 then\r\n                table.insert(toStore, toStoreSlot)\r\n            end\r\n            debugLog(\"Getting storable objects at site \" .. index .. \" complete\")\r\n        end\r\n        completedSites = completedSites + 1\r\n\r\n        local waitCount = 0\r\n        if index == 1 then\r\n            while completedSites < 8 do\r\n                debugLog(\"Waiting for \" .. waitCount)\r\n                waitCount = waitCount + 1\r\n            end\r\n            startLuaCoroutine(self, \"quickStoreCoroutine\")\r\n        end\r\n    end\r\n    getObjectsAtSites(getRuinableObjectsAtSite, false)\r\nend\r\n\r\nfunction unifySites()\r\n    local emptySites = {}\r\n    local currentSlot = 1\r\n    function unifySitesCallback(hitObjects, slot)\r\n        function unifySitesCallbackCoroutine()\r\n            local waitCount = 0\r\n            while not (slot == currentSlot) do\r\n                coroutine.yield(0)\r\n                if isDebug() and waitCount%20 == 0 then printToAll(\"Waiting for \" .. waitCount/20 .. \", \" .. currentSlot .. \" \" .. slot) end\r\n                waitCount = waitCount + 1\r\n            end\r\n            debugLog(\"Getting storable objects at site \" .. slot)\r\n            local isEmpty = true\r\n            for _, obj in ipairs(hitObjects) do\r\n                if not (obj.getGUID() == GUIDs.map) and\r\n                not (obj.getGUID() == GUIDs.table) and\r\n                not (obj.getGUID() == GUIDs.scriptingTrigger) and\r\n                not (obj.memo == \"trigger\")  then\r\n                    if obj.hasTag(tags.site) then\r\n                        obj.setLock(true)\r\n                        isEmpty = false\r\n                    end\r\n                end\r\n            end\r\n            if isEmpty then\r\n                debugLog(\"Site \" .. slot .. \" is empty\")\r\n                table.insert(emptySites, slot)\r\n            elseif #emptySites > 0 then\r\n                \r\n                debugLog(\"Moving objects from site \" .. slot .. \" to site \" .. emptySites[1])\r\n                local destinationSlot = table.remove(emptySites, 1)\r\n                local deltaPosition = vectorSum(\r\n                    {\r\n                        x = getTransformStruct(\"site\", slot, mapTransform).position.x*-1,\r\n                        y = getTransformStruct(\"site\", slot, mapTransform).position.y*-1,\r\n                        z = getTransformStruct(\"site\", slot, mapTransform).position.z*-1,\r\n                    },\r\n                    getTransformStruct(\"site\", destinationSlot, mapTransform).position\r\n                )\r\n                for _, obj in ipairs(hitObjects) do\r\n                    if not (obj.getGUID() == GUIDs.map) and not (obj.getGUID() == GUIDs.table) and not (obj.getGUID() == GUIDs.scriptingTrigger) then\r\n                        obj.setPositionSmooth(vectorSum(obj.getPosition(), deltaPosition), false, true)\r\n                    end\r\n                end\r\n                debugLog(\"Moving objects from site \" .. slot .. \" to site \" .. destinationSlot .. \" complete\")\r\n                for i = 0, 40*getSpeedScale() do\r\n                    coroutine.yield(0)\r\n                end\r\n                table.insert(emptySites, slot)\r\n            end\r\n            currentSlot = slot+1\r\n            if currentSlot > 8 then\r\n                printToAll(\"RUIN AND UNIFY COMPLETE\")\r\n            end\r\n            return 1\r\n        end\r\n        startLuaCoroutine(self, \"unifySitesCallbackCoroutine\")\r\n    end\r\n    getObjectsAtSites(unifySitesCallback, true)    \r\nend\r\n\r\nfunction unifyEdificeDecks()\r\n    debugLog(\"Unifying Edifice decks\")\r\n    local decks = getEdificeDecks()\r\n    local firstDeck = decks.Arcane\r\n    for _, deck in pairs(decks) do\r\n        if deck ~= firstDeck then\r\n            firstDeck.putObject(deck)\r\n            for i = 0, 1*getSpeedScale() do\r\n                coroutine.yield(0)\r\n            end\r\n        end\r\n    end\r\n    for i = 0, 3*getSpeedScale() do\r\n        coroutine.yield(0)\r\n    end\r\n    firstDeck.setName(\"Edifice Deck\")\r\n    firstDeck.shuffle()\r\n    debugLog(\"Unifying Edifice decks complete\")\r\nend\r\n\r\n-- ==============================\r\n-- ATLAS BOX RETRIEVAL\r\n-- ==============================\r\n\r\nfunction retrieve(player_color, object_position, object, retrieveIndexOrFalse, continual)\r\n    debugLog(\"Retrieving site(s) from Atlas Box\")\r\n    local retrieveIndex = (retrieveIndexOrFalse == nil) and 0 or retrieveIndexOrFalse\r\n    local hasRetrieved = false\r\n    local retrieveBack = retrieveIndex == (#objects.atlasBox.getObjects())-1\r\n    function retrieveAtFirstEmptySlot(foundObjects, slotNumber)\r\n        if not hasRetrieved or continual then\r\n            for _, obj in ipairs(foundObjects) do\r\n                if obj.hasTag(tags.site) then\r\n                    if slotNumber == 8 then\r\n                        printToAll(\"No room to summon sites\")\r\n                    end\r\n                    return\r\n                end\r\n            end\r\n            hasRetrieved = true\r\n            local countsAndTags = {\r\n                {tag = tags.relic, data = {count = 0, printName = \"Relic(s)\"}},\r\n                {tag = tags.edifice, data = {count = 0, printName = \"Edifice(s)\"}},\r\n                {tag = tags.card, data = {count = 0, printName = \"Card(s)\"}},\r\n            }\r\n            local bagIndex = retrieveIndex\r\n            debugLog(\"Retrieving site \" .. bagIndex)\r\n            local siteWithAttachments = getFromAtlasBox(bagIndex)\r\n            for _, obj in ipairs(siteWithAttachments.getAttachments()) do\r\n                for _, countAndTag in ipairs(countsAndTags) do\r\n                    if dataTableContains(obj.tags, countAndTag.tag) then\r\n                        countAndTag.data.count = countAndTag.data.count + 1\r\n                    end\r\n                end\r\n            end\r\n            debugLog(\"Retrieving site \" .. bagIndex .. \" complete\")\r\n            spawnSiteAndAttachmentsAtTransform(siteWithAttachments, getTransformStruct(\"site\", slotNumber, mapTransform), false)\r\n            \r\n            local messageParts = {}\r\n            for _, countAndTag in ipairs(countsAndTags) do\r\n                if countAndTag.data.count > 0 then\r\n                    table.insert(messageParts, countAndTag.data.count .. \" \" .. countAndTag.data.printName)\r\n                end\r\n            end\r\n            if isDebug() then\r\n                printToAll(#messageParts > 0 and (\"Summoning Site with \" .. table.concat(messageParts, \", \")) or (\"Summoning Empty Site\"))\r\n            end\r\n            if retrieveBack then\r\n                refreshRevisitPreview()\r\n            end\r\n            return\r\n        end\r\n    end\r\n    if retrieveInCooldown then\r\n        printToAll(\"Wait a sec...\")\r\n    end\r\n    if not retrieveInCooldown then\r\n        retrieveInCooldown = true\r\n        getObjectsAtSites(retrieveAtFirstEmptySlot, true)\r\n        Wait.time(function()\r\n            retrieveInCooldown = false\r\n        end, 0.5)\r\n    end\r\nend\r\n\r\nfunction retrieveBack(player_color, object_position, object)\r\n    retrieve(player_color, object_position, object, (#objects.atlasBox.getObjects())-1, false)\r\nend\r\n\r\nfunction retrieveRest(player_color, object_position, object)\r\n    retrieve(player_color, object_position, object, 0, true)\r\nend\r\n\r\nfunction retrieveOnce(player_color, object_position, object)\r\n    retrieve(player_color, object_position, object, 0, false)\r\nend\r\n\r\nfunction refreshRevisitPreview()\r\n    function refreshRevisitPreviewCoroutine()\r\n        debugLog(\"Refreshing Atlas Box site preview\")\r\n        local previewTransform = getTransformStruct(\"preview\", 0, selfTransform)\r\n        if sitePreview then \r\n            debugLog(\"Destroy old site preview\")\r\n            for _, obj in ipairs(sitePreview) do\r\n                destroyObject(obj)\r\n            end\r\n            sitePreview = {}\r\n            debugLog(\"Destroy old site preview complete\")\r\n        end\r\n        debugLog(\"Loading new site to preview\")\r\n        local toStore = {}\r\n        local lastSite = getFromAtlasBox(#objects.atlasBox.getObjects()-1)\r\n        local denizenCount = 0\r\n        local relicCount = 0\r\n        local totalCardCount = 0\r\n        debugLog(\"Getting attachments for site \" .. lastSite.getName())\r\n        for _, obj in ipairs(lastSite.getAttachments()) do\r\n            if dataTableContains(obj.tags, tags.edifice) or dataTableContains(obj.tags, tags.relic) or dataTableContains(obj.tags, tags.card) then\r\n                totalCardCount = totalCardCount + 1\r\n            end\r\n        end\r\n        local attachments = lastSite.removeAttachments()\r\n        local siteClone = lastSite.clone()\r\n        debugLog(\"Creating attachment previews\")\r\n        for _, obj in ipairs(attachments) do\r\n            if obj.hasTag(tags.edifice) or obj.hasTag(tags.card) then\r\n                denizenClone = obj.clone()\r\n                lastSite.addAttachment(obj)\r\n                denizenClone.setLock(true)\r\n                local denizen_z = roundToNearest180(denizenClone.getRotation().z)\r\n                denizenClone.setRotation(vectorSum(\r\n                    previewTransform.rotation,\r\n                    {x=0, y=180+180, z=denizen_z}\r\n                ))\r\n                denizenClone.setScale(vector(1.5, 0.001, 1.5))\r\n                denizenClone.setPosition(vectorSum(previewTransform.position,vector(2.15 - 1*denizenCount, -0.75-.1*denizenCount, -0.02 - 0.001*denizenCount)))\r\n                denizenClone.setDescription(SITE_PREVIEW)\r\n                denizenCount = denizenCount + 1\r\n                table.insert(sitePreview, denizenClone)\r\n            end\r\n        end\r\n        for _, obj in ipairs(attachments) do\r\n            if obj.hasTag(tags.relic) then\r\n                relicClone = obj.clone()\r\n                lastSite.addAttachment(obj)\r\n                relicClone.setLock(true)\r\n                relicClone.setRotation(vectorSum(previewTransform.rotation, vector(0,180,0)))\r\n                relicClone.setScale(vector(0.75, 0.001, 0.75))\r\n                relicClone.setPosition(vectorSum(previewTransform.position, vector(2.35 - 1.5*relicCount, -1.75, -0.03 - 0.001*relicCount)))\r\n                relicClone.setDescription(SITE_PREVIEW)\r\n                relicCount = relicCount + 1\r\n                table.insert(sitePreview, relicClone)\r\n            end\r\n        end\r\n        debugLog(\"Creating attachment previews complete\")\r\n        for i = 0, 5*getSpeedScale() do\r\n            coroutine.yield(0)\r\n        end\r\n        debugLog(\"Putting site into Atlas Box\")\r\n        putSiteIntoAtlasBox(lastSite)\r\n        debugLog(\"Putting site into Atlas Box complete\")\r\n\r\n        debugLog(\"Final site preview adjustments\")\r\n        siteClone.setLock(true)\r\n        siteClone.setRotation(previewTransform.rotation)\r\n        siteClone.setScale(vector(1.8, 0.00001, 1.8))\r\n        siteClone.setPosition(previewTransform.position)\r\n        siteClone.setName(\"New Atlas Box\")\r\n        siteClone.setDescription(SITE_PREVIEW)\r\n        siteClone.addContextMenuItem(\"RUIN and unify Sites\", ruinSites)\r\n        siteClone.addContextMenuItem(\"EXPLORE new Sites\", retrieveRest)\r\n        siteClone.addContextMenuItem(\"REVISIT an old Site\", retrieveBack)\r\n        siteClone.addContextMenuItem(\"EXPLORE a new Site\", retrieveOnce)\r\n        siteClone.addContextMenuItem(\"Retrieve lost Relics\", spawnRelics)\r\n        siteClone.addContextMenuItem(\"Search (Debug)\", search)\r\n        table.insert(sitePreview, siteClone)\r\n        debugLog(\"Final site preview adjustments complete\")\r\n        return 1\r\n    end\r\n    startLuaCoroutine(self, \"refreshRevisitPreviewCoroutine\")\r\nend\r\n\r\n\r\n--- ==============================\r\n--- ATLAS BOX RELIC RETRIEVAL\r\n--- ==============================\r\n\r\n-- Try to get 10 relics from the Atlas Box \r\nfunction spawnRelics()\r\n    debugLog(\"Spawning relics from Atlas Box\")\r\n    function spawnRelicsCoroutine()\r\n        for i = 1, #objects.atlasBox.getObjects() do\r\n            local relicCount = 0    \r\n            local siteWithAttachments = getFromAtlasBox(0)\r\n            for i = 0, 1*getSpeedScale() do\r\n                coroutine.yield(0)\r\n            end\r\n            if relicCount < 10 then\r\n                for _, item in ipairs(siteWithAttachments.getAttachments()) do\r\n                    debugLog(\"Checking site \" .. siteWithAttachments.getName() .. \" for relics\")\r\n                    local foundRelic = false\r\n                    if relicCount < 10 and dataTableContains(item.tags, tags.relic) then\r\n                        debugLog(\"Found relic at site\")\r\n                        foundRelic = true\r\n                    end\r\n                    if foundRelic then\r\n                        debugLog(\"Detaching relic from site \" .. siteWithAttachments.getName())\r\n                        local attachments = siteWithAttachments.removeAttachments()\r\n                        local transform = getTransformStruct(\"relicStack\", 0, mapTransform)\r\n                        for _, obj in ipairs(attachments) do\r\n                            if obj.hasTag(tags.relic) and relicCount < 10 then\r\n                                relicCount = relicCount + 1\r\n                                obj.setScale(vector(0.96, 1.0, 0.96)) --Sometimes attaching skews the scale\r\n                                obj.setPosition(transform.position)\r\n                                obj.setRotation(transform.rotation)\r\n                            else\r\n                                siteWithAttachments.addAttachment(obj)\r\n                            end\r\n                        end\r\n                        debugLog(\"Detaching relic from site \" .. siteWithAttachments.getName() .. \" complete\")\r\n                    end\r\n                end\r\n            end\r\n            for i = 0, 5*getSpeedScale() do\r\n                coroutine.yield(0)\r\n            end\r\n            putSiteIntoAtlasBox(siteWithAttachments)\r\n        end\r\n        printToAll(\"Retrieved \" .. relicCount .. \" relics from the Atlas Box\")\r\n        refreshRevisitPreview()\r\n        debugLog(\"Spawning relics from Atlas Box complete\")\r\n        return 1\r\n    end\r\n    startLuaCoroutine(self, \"spawnRelicsCoroutine\")\r\nend\r\n\r\n-- ==============================\r\n-- UTILITY\r\n-- ==============================\r\n\r\nfunction roundToNearest180(z)\r\n    -- Round z rotation to nearest 0, 180, or 360\r\n    local nearest = 0\r\n    if math.abs(z - 180) < math.abs(z - 0) and math.abs(z - 180) < math.abs(z - 360) then\r\n        nearest = 180\r\n    elseif math.abs(z - 360) < math.abs(z - 0) then\r\n        nearest = 360\r\n    end\r\n    return nearest\r\nend\r\n\r\n-- Get object from Atlas Box at a given index\r\nfunction getFromAtlasBox(i)\r\n    local isUnlocked = objects.atlasBox.hasTag(tags.unlocked)\r\n    objects.atlasBox.addTag(tags.unlocked)\r\n    local toSpawn = objects.atlasBox.takeObject({\r\n        index = i,\r\n        position = vectorSum(objects.atlasBoxModel.getPosition(),vector(0,0,-5)),\r\n        rotation = vectorSum(objects.atlasBoxModel.getRotation(),vector(180,0,0))\r\n    })\r\n    if not isUnlocked\r\n        then objects.atlasBox.removeTag(tags.unlocked)\r\n    end\r\n    return toSpawn\r\nend\r\n\r\n-- Put site into the Atlas Box with attachments\r\nfunction putSiteIntoAtlasBox(site)\r\n    local isUnlocked = objects.atlasBox.hasTag(tags.unlocked)\r\n    objects.atlasBox.addTag(tags.unlocked)\r\n    site.setRotation({x=0,y=180,z=180})\r\n    objects.atlasBox.putObject(site)\r\n    if not isUnlocked then\r\n        objects.atlasBox.removeTag(tags.unlocked)\r\n    end\r\nend\r\n\r\n-- Put object into the Atlas Box with attachments\r\nfunction putIntoAtlasBox(objs, shouldRefreshPreview)\r\n    local isUnlocked = objects.atlasBox.hasTag(tags.unlocked)\r\n    objects.atlasBox.addTag(tags.unlocked)\r\n    local site = nil\r\n    for _, obj in ipairs(objs) do\r\n        if obj.hasTag(tags.site) then\r\n            site = obj\r\n            site.setRotation({x=0,y=180,z=180})\r\n            for i = 0, 3*getSpeedScale() do\r\n                coroutine.yield(0)\r\n            end\r\n            break\r\n        end\r\n    end\r\n    for _, obj in ipairs(objs) do\r\n        if not (obj.hasTag(tags.site)) then\r\n            site.addAttachment(obj)\r\n        end\r\n    end\r\n    for i = 0, 10*getSpeedScale() do\r\n        coroutine.yield(0)\r\n    end\r\n    objects.atlasBox.putObject(site)\r\n    if shouldRefreshPreview then\r\n        refreshRevisitPreview()\r\n    end\r\n    if not isUnlocked then\r\n        objects.atlasBox.removeTag(tags.unlocked)\r\n    end\r\n    return true\r\nend\r\n\r\n-- Spawn all objects from a list at a given position and rotation\r\nfunction spawnSiteAndAttachmentsAtTransform(site, baseTransform, duringSetup) \r\n    function spawnSiteAndAttachmentsAtTransformCoroutine() \r\n        debugLog(\"Spawning site and attachments at given location\")\r\n        local relicNumber, denizenNumber, denizenCount = 0, 0, 0\r\n        local siteAttachments = site.removeAttachments()\r\n        site.setPositionSmooth(baseTransform.position, false)\r\n        site.setRotationSmooth(baseTransform.rotation, false)\r\n        site.addContextMenuItem(\"Preserve Site\", markCard)\r\n        site.addContextMenuItem(\"Allow Site to Ruin\", unMarkCard)\r\n        if(duringSetup) then\r\n            site.setLock(true)\r\n        end\r\n        -- Take out edifices and relics\r\n           -- Count edifices first but take relics out first since they can collide\r\n        debugLog(\"Counting attachments for site \" .. site.getName())\r\n        for _, obj in ipairs(siteAttachments) do\r\n            local transform = nil\r\n            if obj.hasTag(tags.edifice) or obj.hasTag(tags.card) then\r\n                denizenNumber = denizenNumber+1\r\n            end\r\n        end\r\n        for _, obj in ipairs(siteAttachments) do\r\n            local transform = nil\r\n            if obj.hasTag(tags.relic) then\r\n                transform = getTransformStruct(\"relic\", denizenNumber, baseTransform)\r\n                denizenNumber = denizenNumber + 1\r\n                relicNumber = relicNumber + 1\r\n            end\r\n            if transform then\r\n                for i = 0, 1*getSpeedScale() do\r\n                    coroutine.yield(0)\r\n                end\r\n                obj.setRotationSmooth(rot.relic, false)\r\n                obj.setPositionSmooth(transform.position, false)\r\n                obj.setScale(vector(0.96, 1.0, 0.96)) --Sometimes attaching skews the scale\r\n            end\r\n        end\r\n        denizenNumber = 0\r\n        debugLog(\"Spawning denizen attachments for site \" .. site.getName())\r\n        for _, obj in ipairs(siteAttachments) do\r\n            local transform = nil\r\n            if obj.hasTag(tags.edifice) or obj.hasTag(tags.card) then\r\n                transform = getTransformStruct(\"denizen\", denizenNumber, baseTransform)\r\n                denizenNumber = denizenNumber+1\r\n            end\r\n            if transform then\r\n                for i = 0, 1*getSpeedScale() do\r\n                    coroutine.yield(0)\r\n                end\r\n                obj.setPositionSmooth(transform.position, false)\r\n                obj.setRotationSmooth({x=roundToNearest180(obj.getRotation().x), y=roundToNearest180(transform.rotation.y), z=roundToNearest180(obj.getRotation().z)}, false)\r\n                obj.setScale(vector(1.65, 1.0, 1.65)) --Sometimes attaching skews the scale\r\n            end\r\n        end\r\n        debugLog(\"Spawning denizen attachments for site \" .. site.getName() .. \" complete\")\r\n        denizenNumber = denizenNumber + relicNumber\r\n        local relicSlots = getSiteScriptTag(site, \"RelicSlots\")\r\n        local banditSlots = 3-relicSlots\r\n        -- Add any new relics\r\n        debugLog(\"Adding relics for site \" .. site.getName());\r\n        if relicNumber < relicSlots then\r\n            if objects.relicDeck == nil then\r\n                printToAll(\"Cannot find Relic Deck. Get more relics from the Atlas Box\")\r\n            else\r\n                for i = relicNumber, relicSlots-1 do\r\n                    local transform = getTransformStruct(\"relic\", denizenNumber, baseTransform)\r\n                    local newRelic = getRandomObjectFromContainer(objects.relicDeck, false)\r\n                    for i = 0, 1*getSpeedScale() do\r\n                        coroutine.yield(0)\r\n                    end\r\n                    newRelic.setPositionSmooth(transform.position, false)\r\n                    newRelic.setRotationSmooth(rot.relic)\r\n                    denizenNumber = denizenNumber + 1  \r\n                end\r\n            end\r\n        end\r\n        if relicNumber > relicSlots then\r\n            printToAll(\"!!!!Too many relics were attached to the site. Shuffle any excess relics into the Relic Deck!!!!\")\r\n        end\r\n        debugLog(\"Adding relics for site \" .. site.getName() .. \" complete\")\r\n        debugLog(\"Adding bandits for site \" .. site.getName())\r\n        --Add bandits\r\n        if banditSlots > 0 then\r\n            for i = 0, banditSlots-1 do\r\n                local transform = getTransformStruct(\"bandit\", i, baseTransform)\r\n                local newBandit = getRandomObjectFromContainer(objects.banditBag, false)\r\n                for i = 0, 1*getSpeedScale() do\r\n                    coroutine.yield(0)\r\n                end\r\n                newBandit.setPositionSmooth(transform.position)\r\n            end\r\n        end\r\n        debugLog(\"Adding bandits for site \" .. site.getName() .. \" complete\")\r\n        debugLog(\"Spawning site and attachments complete\")\r\n        return 1\r\n    end\r\n    startLuaCoroutine(self, \"spawnSiteAndAttachmentsAtTransformCoroutine\")\r\n    return\r\nend\r\n\r\nfunction getObjectsAtSites(callback, forwards)\r\n    function getObjectAtSite(callback, index, endIndex, step)\r\n        local zone = spawnObject({\r\n            type = \"FogOfWarTrigger\",\r\n            position = vectorSum(getTransformStruct(\"site\", index, mapTransform).position, vector(5.65, 0, 0)),\r\n            scale = vector(19.5,2,5.4),\r\n            sound = false,\r\n            callback_function = function(createdZone)\r\n                createdZone.memo = \"trigger\"\r\n                Wait.time(function()\r\n                    local hitObjects = createdZone.getObjects(true)\r\n                    callback(hitObjects, index)\r\n                    if not (index == endIndex) then\r\n                        getObjectAtSite(callback, index + step, endIndex, step)\r\n                    end\r\n                    Wait.time(function ()\r\n                        destroyObject(createdZone)\r\n                    end, 0.2)\r\n                end, 0.1)\r\n            end\r\n        })\r\n    end\r\n\r\n    \r\n    local s, e, c = 1, 8, 1\r\n    if not forwards then\r\n        s, e, c = 8, 1, -1\r\n    end\r\n    getObjectAtSite(callback, s, e, c)    \r\nend\r\n\r\nfunction getArchiveDecks() \r\n    local decks = {} \r\n    for deckName, guid in pairs(GUIDs.archiveDecks) do\r\n        decks[deckName] = getObjectFromGUID(guid)\r\n    end\r\n    return decks\r\nend\r\n\r\nfunction getEdificeDecks() \r\n    local decks = {} \r\n    for deckName, guid in pairs(GUIDs.edificeDecks) do\r\n        decks[deckName] = getObjectFromGUID(guid)\r\n    end\r\n    return decks\r\nend\r\n\r\nfunction getEdificeDeck()\r\n    debugLog(\"Getting Edifice Deck\")\r\n    if not (nil == getObjectFromGUID(GUIDs.edificeDeck)) then\r\n        return getObjectFromGUID(GUIDs.edificeDeck)\r\n    else\r\n        debugLog(\"Edifice Deck not found, getting by position\")\r\n        for _, obj in ipairs(getAllObjects()) do\r\n            -- If the object is a deck and it's position is between -67.15, 18.75 and -63.35,13.45, return that and set it as the Edifice Deck\r\n            if obj.type == \"Deck\" and \r\n               obj.getPosition().x > -67.15 and obj.getPosition().x < -63.35 and\r\n               obj.getPosition().z > 13.45 and obj.getPosition().z < 18.75 then\r\n                debugLog(\"Found Edifice Deck by position\")\r\n                return obj\r\n            end\r\n        end\r\n    end\r\n    printToAll(\"Edifice Deck not found. Please place Edifices on the denoted area of the Archives\")\r\n    return nil\r\nend\r\n\r\nfunction markCard(_, _, obj)\r\n      obj.highlightOn(hexToColor(\"#ff00ff\"))\r\n      obj.addTag(tags.protected)\r\n  end\r\n  \r\nfunction unMarkCard(_, _, obj)\r\n    obj.highlightOff()\r\n    obj.removeTag(tags.protected)\r\nend\r\n\r\nfunction isDebug()\r\n    return self.hasTag(tags.debug)\r\nend\r\n\r\nfunction debugLog(msg)\r\n    if isDebug() then\r\n        printToAll(\"--\" .. msg)\r\n    end\r\nend\r\n\r\nfunction getSiteScriptTag(site, tag)\r\n    return tonumber(string.match(site.getLuaScript(), (tag .. \"=(%d+)\")))\r\nend\r\n\r\nfunction getSpeedScale()\r\n    if (getSpeedDisplayButton() ~= nil) then\r\n        return 30/getSpeedDisplayButton().label\r\n    end\r\n    return 3\r\nend\r\n\r\nfunction getSpeedDisplayButton()\r\n    for _, obj in ipairs(self.getButtons()) do\r\n        if obj.tooltip == \"speedDisplay\" then\r\n            return obj\r\n        end\r\n    end\r\n    return nil\r\nend\r\n\r\nfunction speedUp(obj, color, alt_click)\r\n    local speedDisplayButton = getSpeedDisplayButton()\r\n    if speedDisplayButton ~= nil then\r\n        local newSpeed = math.min(30, speedDisplayButton.label + 1)\r\n        self.editButton({\r\n            index = speedDisplayButton.index,\r\n            label = newSpeed\r\n        })\r\n    end\r\nend\r\n\r\nfunction speedDown(obj, color, alt_click)\r\n    local speedDisplayButton = getSpeedDisplayButton()\r\n    if speedDisplayButton ~= nil then\r\n        local newSpeed = math.max(2, speedDisplayButton.label - 1)\r\n        self.editButton({\r\n            index = speedDisplayButton.index,\r\n            label = newSpeed\r\n        })\r\n    end\r\nend\r\n\r\nfunction nothing()\r\nend\r\n\r\n\r\n-- ==============================\r\n-- EVENT HANDLERS\r\n-- ==============================\r\nfunction tryRandomize(object)\r\n    return false\r\nend\r\n\r\n-- function onObjectLeaveContainer(container, leave_object)\r\n--     -- debugLog(container.getGUID())\r\n--     -- debugLog(objects.atlasBox.getGUID())\r\n--     -- debugLog(tostring(container == objects.atlasBox))\r\n--     -- debugLog(tostring(objects.atlasBoxModel.hasTag(tags.unlocked)))\r\n--     -- printToAll(tostring((container.getGUID() == objects.atlasBox.getGUID()) and (not (objects.atlasBoxModel.hasTag(tags.unlocked)))))\r\n--     if ((container.getGUID() == objects.atlasBox.getGUID()) and (not (objects.atlasBoxModel.hasTag(tags.unlocked)))) then\r\n--         printToAll(\"Atlas Box manipulation is handled by scripting.\\nIf you really want to manually change things, change tags on the Atlas Box to remove its lock.\\n\")\r\n--         container.putObject(leave_object)\r\n--     end\r\n-- end\r\n\r\n-- function tryObjectEnter(object)\r\n--     if self.hasTag(tags.unlocked) then\r\n--         return true\r\n--     else\r\n--         printToAll(\"Atlas Box manipulation is handled by scripting.\\nIf you really want to manually change things, change tags on the Atlas Box to remove its lock.\\n\")\r\n--         return false\r\n--     end\r\n-- end\r\n\r\n-- function peek(obj, player_clicker_color, alt_click)\r\n--     showAtlasBoxPreview(player_clicker_color)\r\n-- end\r\n\r\n-- --TODO: Add an interface and show attachments\r\n-- function showAtlasBoxPreview(player_color)\r\n--     function showAtlasBoxPreviewCoroutine()\r\n--         -- Set up globals to track image URLs\r\n--         local imageAndAttachments = {}\r\n--         local numSites = #objects.atlasBox.getObjects();\r\n\r\n--         -- Pull the last 2 items\r\n--         for i = 1, numSites do\r\n--             local siteWithAttachments = getFromAtlasBox(0)\r\n--             for j = 0, 2*getSpeedScale() do\r\n--                 coroutine.yield(0)\r\n--             end\r\n--             if i == 1 or i == 2 then\r\n--                 local relicCount = 0\r\n--                 local edificeCount = 0\r\n--                 for _, obj in ipairs(siteWithAttachments.getAttachments()) do\r\n--                     if dataTableContains(obj.tags, tags.relic) then\r\n--                         relicCount = relicCount + 1\r\n--                     elseif dataTableContains(obj.tags, tags.edifice) then\r\n--                         edificeCount = edificeCount + 1\r\n--                     end\r\n--                 end\r\n--                 table.insert(imageAndAttachments, {image = getImageFromObject(siteWithAttachments), relicCount = relicCount, edificeCount = edificeCount, object = siteWithAttachments})\r\n--             end\r\n--             putSiteIntoAtlasBox(siteWithAttachments)\r\n--         end\r\n\r\n--         showPreviewUI(player_color, imageAndAttachments)\r\n--         return 1\r\n--     end\r\n--     startLuaCoroutine(self, \"showAtlasBoxPreviewCoroutine\")\r\n-- end\r\n\r\nfunction getImageFromObject(obj)\r\n    local custom = obj.getCustomObject()\r\n    if custom.face then\r\n        return custom.face\r\n    elseif custom.image then\r\n        return custom.image\r\n    else\r\n        return \"https://via.placeholder.com/300x300.png?text=No+Image\"\r\n    end\r\nend\r\n\r\nfunction search(player_color)\r\n    if self.hasTag(tags.debug) then\r\n        objects.atlasBox.Container.search(player_color)\r\n    end \r\nend\nend)\n__bundle_register(\"src/XmlHelper\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal siteNames = {}\r\n\r\n--- Escapes special XML characters in a string.\r\n-- @param str The string to escape.\r\n-- @return The escaped string.\r\nfunction escapeXml(str)\r\n    if type(str) ~= \"string\" then return str end\r\n    str = string.gsub(str, \"&\", \"&amp;\") -- Must be first\r\n    str = string.gsub(str, \"<\", \"&lt;\")\r\n    str = string.gsub(str, \">\", \"&gt;\")\r\n    str = string.gsub(str, \"\\\"\", \"&quot;\")\r\n    str = string.gsub(str, \"'\", \"&apos;\")\r\n    return str\r\nend\r\n\r\n--- Closes the Atlas Preview UI.\r\nfunction closeAtlasPreviewUI(player_obj, value, id)\r\n    UI.setAttribute(\"atlasPreviewPanel\", \"active\", \"false\")\r\n    UI.setAttribute(\"atlasPreviewPanel\", \"visibility\", \"\")\r\n    log(\"Atlas Preview UI closed.\")\r\nend\r\n\r\n--- Handles clicks on the site preview buttons.\r\n-- Also closes the UI after a button click.\r\nfunction handleSiteButtonClick(player_obj, value, id)\r\n    local siteName = (id == \"site1Button\" and siteNames[1]) or (id == \"site2Button\" and siteNames[2]) or \"Unknown Site\"\r\n    if player_obj then\r\n        local message = player_obj.color .. \" explored the \" .. siteName .. \".\"\r\n        printToAll(message)\r\n        log(message)\r\n    end\r\n    retrieve(nil, nil, nil, (id == \"site1Button\" and 0 or 1), false)\r\n    \r\n    \r\n    -- Close the UI after a button click\r\n    closeAtlasPreviewUI(player_obj)\r\nend\r\n\r\n--- Displays the Atlas Box Preview UI for exactly two sites.\r\nfunction showPreviewUI(player_color, imageAndAttachments)\r\n    if not player_color or not Player[player_color] then\r\n        log(\"showPreviewUI Error: Invalid player_color: \" .. tostring(player_color))\r\n        return\r\n    end\r\n\r\n    local scriptGuid = self.getGUID() \r\n\r\n    local panelWidth = 940\r\n    local panelHeight = 540\r\n\r\n        -- Prepare Custom Assets\r\n    local customAssets = UI.getCustomAssets()\r\n    ----------------------------------------------------------------\r\n    -- 1. helper to build the attachment ribbon for one site\r\n    ----------------------------------------------------------------\r\n    local function buildRibbon(siteIndex, edificeCnt, relicCnt)\r\n\r\n        local ribbon = [[\r\n            <HorizontalLayout spacing=\"15\" minheight=\"10\" padding=\"20 20 0 0\"\r\n                            childAlignment=\"LowerCenter\">]]\r\n\r\n        for _ = 1, edificeCnt do\r\n            ribbon = ribbon .. [[\r\n                <Image image=\"halfDenizen\" height=\"100\" minHeight=\"100\" preserveAspect=\"true\"/>]]\r\n        end\r\n        for _ = 1, relicCnt do\r\n            ribbon = ribbon .. [[\r\n                <Image image=\"relicBack\" height=\"100\" minHeight=\"100\" preserveAspect=\"true\"/>]]\r\n        end\r\n        return ribbon .. [[</HorizontalLayout>]]\r\n    end\r\n\r\n\r\n    ----------------------------------------------------------------\r\n    -- 2. iterate over the two sites and build everything on the fly\r\n    ----------------------------------------------------------------\r\n    local siteXmlBlocks = {}   -- holds the finished XML for each site\r\n    siteNames = {}             -- holds the names of the sites\r\n\r\n    for i, site in ipairs(imageAndAttachments) do\r\n        local name  = site.object.getName()\r\n        table.insert(siteNames, name)  -- store the name for later use\r\n        local url   = site.image\r\n\r\n        -- add the picture to the custom-asset list once\r\n        local exists = false\r\n        for _, asset in ipairs(customAssets) do\r\n            if asset.name == name then exists = true break end\r\n        end\r\n        if not exists then table.insert(customAssets, {name = name, url = url}) end\r\n\r\n        -- build this site’s ribbon & outer block\r\n        local ribbon  = buildRibbon(i, site.edificeCount or 0, site.relicCount or 0)\r\n\r\n        local siteXml = string.format([[\r\n            <VerticalLayout id=\"site%dContainer\" spacing=\"0\" width=\"420\"\r\n                            childForceExpandWidth=\"false\" childAlignment=\"LowerCenter\">\r\n\r\n                <Panel minWidth=\"420\" height=\"0\" rectAlignment=\"LowerCenter\">\r\n                    <Panel width=\"420\" id=\"site%dRibbon\"\r\n                        rectAlignment=\"LowerCenter\" offsetXY=\"0 -360\" height=\"36\">%s</Panel>\r\n                </Panel>\r\n\r\n                <Image  id=\"site%dImage\" image=\"%s\" minWidth=\"435\" preserveAspect=\"true\"/>\r\n\r\n                <Panel minHeight=\"70\"/>\r\n\r\n                <Button id=\"site%dButton\" text=\"Explore %s\"\r\n                        onClick=\"%s/handleSiteButtonClick\"\r\n                        minWidth=\"435\" fontSize=\"20\" minHeight=\"80\"/>\r\n            </VerticalLayout>\r\n        ]], i, i, ribbon, i, name, i, name, scriptGuid)\r\n\r\n        table.insert(siteXmlBlocks, siteXml)\r\n    end\r\n\r\n    -- push custom assets once\r\n    UI.setCustomAssets(customAssets)\r\n    for _ = 1, 10 do coroutine.yield(0) end   -- small wait for images\r\n\r\n    ----------------------------------------------------------------\r\n    -- 3. build the main window with both site blocks injected\r\n    ----------------------------------------------------------------\r\n    local ui_xml = string.format([[\r\n        <Defaults>\r\n            <Text fontStyle=\"Bold\" color=\"#E0E0E0FF\" resizeTextMinSize=\"10\"\r\n                horizontalOverflow=\"Overflow\" verticalOverflow=\"Overflow\"/>\r\n            <Button color=\"#4CAF50FF\" textColor=\"#FFFFFFFF\" fontStyle=\"Bold\"\r\n                    hoverColor=\"#5CB85CFF\" pressColor=\"#449D44FF\"/>\r\n        </Defaults>\r\n\r\n        <Panel id=\"atlasPreviewPanel\" rectAlignment=\"MiddleCenter\"\r\n            width=\"%d\" height=\"%d\" color=\"rgba(0,0,0,0.97)\" active=\"true\"\r\n            returnEscKey=\"true\" onReturn=\"%s/closeAtlasPreviewUI\"\r\n            padding=\"15 15 10 15\">\r\n\r\n            <VerticalLayout width=\"100%%\" height=\"100%%\" spacing=\"10\">\r\n                <Panel minHeight=\"50\" width=\"100%%\">\r\n                    <Text text=\"Pick a Site to Explore\" fontSize=\"32\" alignment=\"MiddleCenter\" minHeight=\"200\"/>\r\n                    <Button id=\"closeAtlasPreviewButton\" text=\"X\"\r\n                            onClick=\"%s/closeAtlasPreviewUI\"\r\n                            width=\"40\" height=\"40\" rectAlignment=\"UpperRight\" offsetXY=\"-5 5\"\r\n                            color=\"#D9534FFF\" hoverColor=\"#C9302CFF\" pressColor=\"#AC2925FF\"\r\n                            fontSize=\"18\"/>\r\n                </Panel>\r\n\r\n                <HorizontalLayout id=\"siteHolderLayout\" height=\"400\"\r\n                                childAlignment=\"Bottom\">\r\n                    %s\r\n                </HorizontalLayout>\r\n            </VerticalLayout>\r\n        </Panel>\r\n    ]], panelWidth, panelHeight, scriptGuid, scriptGuid,\r\n    table.concat(siteXmlBlocks, \"\\n\"))\r\n\r\n    UI.setXml(ui_xml)\r\n    UI.setAttribute(\"atlasPreviewPanel\", \"visibility\", player_color)\r\n    UI.setAttribute(\"atlasPreviewPanel\", \"active\", \"true\")\r\n    log(\"Atlas Preview UI shown to player: \"..player_color)\r\nend\r\n\nend)\n__bundle_register(\"src/Utils/HelperFunctions\", function(require, _LOADED, __bundle_register, __bundle_modules)\nfunction dataTableContains(table, x)\r\n    for _, obj in ipairs(table) do\r\n        if obj == x then return true end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getRandomObjectFromContainer(container, flipped)\r\n    local objects = container.getObjects()\r\n    if #objects == 0 then return nil end  -- Prevent errors when bag is empty\r\n    local selected = objects[math.random(1, #objects)]\r\n\r\n    return container.takeObject({\r\n        guid = selected.guid,\r\n        position = vectorSum(container.getPosition(), {x = 0, y = 5, z = 0}),\r\n        rotation = flipped and vectorSum({x = 180, y = 180, z = 0},container.getRotation()) or container.getRotation(),\r\n    })\r\nend\r\n\r\nfunction vectorSum(v1, v2)\r\n    return {\r\n        x = v1.x + v2.x,\r\n        y = v1.y + v2.y,\r\n        z = v1.z + v2.z\r\n    }\r\nend\r\n\r\nfunction removeButtons(...)\r\n    local buttonsToRemove = {...}\r\n    for _, buttonToRemove in ipairs(buttonsToRemove) do\r\n        local buttonIndex = nil\r\n        if self.getButtons() then\r\n            for i, button in ipairs(self.getButtons()) do\r\n                if button and button.label == buttonToRemove.label then\r\n                    buttonIndex = button.index\r\n                    break\r\n                end\r\n            end\r\n            if buttonIndex then self.removeButton(buttonIndex) end\r\n        end\r\n    end\r\nend\r\n\r\nfunction createButtons(...)\r\n    local buttonsToCreate = {...}\r\n    for _, buttonToCreate in ipairs(buttonsToCreate) do\r\n        self.createButton(buttonToCreate)\r\n    end\r\nend\r\n\r\nfunction addTagAndReturn(item, tag)\r\n    item.addTag(tag)\r\n    return item\r\nend\r\n\r\nfunction prettyPrintTable(obj, indent)\r\n    indent = indent or 0\r\n    local formatting = string.rep(\"  \", indent)\r\n\r\n    if type(obj) ~= \"table\" then\r\n        print(formatting .. tostring(obj))\r\n        return\r\n    end\r\n\r\n    print(formatting .. \"{\")\r\n    for key, value in pairs(obj) do\r\n        local key_str = tostring(key)\r\n        if type(value) == \"table\" then\r\n            print(formatting .. \"  \" .. key_str .. \" = \")\r\n            prettyPrintTable(value, indent + 1)\r\n        else\r\n            print(formatting .. \"  \" .. key_str .. \" = \" .. tostring(value))\r\n        end\r\n    end\r\n    print(formatting .. \"}\")\r\nend\r\n\r\n\r\n-- Get transform for a given tag and index\r\n    -- Requires GeneralConfig\r\n    function getTransformStruct(tag, index, baseTransform)\r\n        return {\r\n            position = vectorSum(\r\n                pos[tag](index or 1), \r\n                (baseTransform and baseTransform.position or {x=0,y=0,z=0})\r\n            ),\r\n            rotation = rot[tag],\r\n        }\r\n    end\nend)\n__bundle_register(\"src/Config/AtlasBoxButtons\", function(require, _LOADED, __bundle_register, __bundle_modules)\n\r\n\r\n-- Buttons\r\nbuttons = {\r\n    retry = {\r\n        click_function = \"retry\",\r\n        function_owner = self,\r\n        label          = \"Fix missing objects \\n and click me \\nto retry\",\r\n        position       = {1.75, -0.99, 0},\r\n        scale          = {2.2, 1.0, 2.2 },\r\n        rotation       = {0, 270, 0},\r\n        width          = 1000,\r\n        height         = 500,\r\n        font_size      = 110,\r\n        color          = hexToColor(\"#823030\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Place missing objects and retry\", \r\n    },\r\n    setup = {\r\n        click_function = \"chronicleSetup\",\r\n        function_owner = self,\r\n        label          = \"Setup Initial\\nAtlas Box, Sites, \\n& World Deck\",\r\n        position       = {1.75, -0.99, 0},\r\n        scale          = {2.2, 1.0, 2.2 },\r\n        rotation       = {0, 270, 0},\r\n        width          = 1000,\r\n        height         = 500,\r\n        font_size      = 130,\r\n        color          = hexToColor(\"#4a915d\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Set Up the Atlas Box for a new Chronicle\", \r\n    },\r\n    speedLabel = {\r\n        click_function = \"nothing\",\r\n        function_owner = self,\r\n        label          = \"Speed\",\r\n        position       = {-0.65, 0.55, -2.38},\r\n        scale          = {1, 1.0, 1 },\r\n        rotation       = {90, 180, 0},\r\n        width          = 0,\r\n        height         = 0,\r\n        font_size      = 130,\r\n        color          = hexToColor(\"#4a915d\"),\r\n        font_color     = {1, 1, 1, 1},\r\n    },\r\n    speedDisplay = {\r\n        click_function = \"nothing\",\r\n        function_owner = self,\r\n        label          = \"10\",\r\n        position       = {-0.65, 0.00, -2.38},\r\n        scale          = {1, 1.0, 1 },\r\n        rotation       = {90, 180, 0},\r\n        width          = 0,\r\n        height         = 0,\r\n        font_size      = 200,\r\n        color          = hexToColor(\"#4a915d\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"speedDisplay\" \r\n    },\r\n    speedUp = {\r\n        click_function = \"speedUp\",\r\n        function_owner = self,\r\n        label          = \"+\",\r\n        position       = {-1.15, 0.025, -2.38},\r\n        scale          = {0.75, 1.0, 0.75},\r\n        rotation       = {90, 180, 0},\r\n        width          = 300,\r\n        height         = 300,\r\n        font_size      = 200,\r\n        color          = hexToColor(\"#999999\"),\r\n        font_color     = {1, 1, 1, 1},\r\n    },\r\n    speedDown = {\r\n        click_function = \"speedDown\",\r\n        function_owner = self,\r\n        label          = \"-\",\r\n        position       = {-0.15, 0.025, -2.38},\r\n        scale          = {0.75, 1.0, 0.75},\r\n        rotation       = {90, 180, 0},\r\n        width          = 300,\r\n        height         = 300,\r\n        font_size      = 200,\r\n        color          = hexToColor(\"#999999\"),\r\n        font_color     = {1, 1, 1, 1},\r\n    }\r\n}\nend)\n__bundle_register(\"src/Config/GeneralConfig\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- GUIDs for needed items. IF SOMETHING IS BROKEN LIKELY THESE ARE NO LONGER CORRECT\r\nGUIDs = {\r\n    atlasBox = \"f8bd3c\",\r\n    banditBag = \"0748d5\",\r\n    newAtlasBox = \"8f8e1a\",\r\n    -- edifices = \"1662f7\",\r\n    relicBag = \"c46336\",\r\n    -- shadowBag = \"1ce44a\",\r\n    siteBag = \"12dafe\",\r\n    table = \"4ee1f2\",\r\n    map = \"d5dacf\",\r\n    dispossessedBag = \"e52b07\",\r\n    archiveDecks = {\r\n        Arcane = \"a79848\",\r\n        Beast = \"d1f201\",\r\n        Discord = \"d40870\",\r\n        Hearth = \"31eab2\",\r\n        Nomad = \"6deb3d\",\r\n        Order = \"275175\"\r\n    },\r\n    edificeDeck = \"1218b6\",\r\n    edificeDecks = {\r\n        Arcane = \"1218b6\",\r\n        Beast = \"9ff2ff\",\r\n        Discord = \"9f8caf\",\r\n        Hearth = \"f96c21\",\r\n        Nomad = \"0a6c96\",\r\n        Order = \"33d062\"\r\n    },\r\n    scriptingTrigger = '84ebee',\r\n\r\n}\r\n\r\n-- Tags to identify items\r\ntags = {\r\n    chronicleCreated = \"chronicleCreated\",\r\n    edifice = \"Edifice\",\r\n    relic = \"Relic\",\r\n    site = \"Site\",\r\n    unlocked = \"Unlocked\",\r\n    protected = \"Protected\",\r\n    debug = \"Debug\",\r\n    ancient = \"Ancient\",\r\n    card = \"Card\",\r\n    slow = \"Slow\",\r\n    bandit = \"Bandit\",\r\n}\r\n\r\n-- Name strings to use for Atlas Slots depending on their states\r\natlasSlotNames = {\r\n    empty = \"[Empty] Slot\",\r\n    full = \"[Full] Slot\"\r\n}\r\n\r\n-- Tables to track things on the portal\r\nportal = {\r\n    edifices = {},\r\n    relics = {},\r\n    sites = {},\r\n}\r\n\r\n-- Positions\r\npos = {\r\n    -- relative to site\r\n    bandit  =       function(i) return {x = -1.5+1.5*i, y = 3, z = 2} end,\r\n    denizen =       function(i) return {x = 5.35+3.3*i, y = 0.25, z = 0} end,\r\n    relic   =       function(i) return {x = 5.35+3.3*i, y = 0.25, z = 0} end,\r\n    -- relative to atlas portal/box\r\n    portal =        function(i) return {x = 0, y = 0.10, z = 0} end,\r\n    preview =       function(i) return {x = 0, y = 1.525, z = -0.56} end,\r\n    -- relative to map\r\n    dispossessed =  function(i) return {x = -117.15, y = 0.55, z = 29.15} end,\r\n    relicStack =    function(i) return {x = -19.7, y = 0.55,  z = -9.9} end,\r\n    site =          function(i)\r\n                        local sitePositions = {\r\n                            { x = -26.55, y = 0.03, z =  5.00 },\r\n                            { x = -26.55, y = 0.03, z = -0.75 },\r\n                            { x = -06.10, y = 0.03, z =  5.00 },\r\n                            { x = -06.10, y = 0.03, z = -0.75 },\r\n                            { x = -06.10, y = 0.03, z = -6.50 },\r\n                            { x =  14.85, y = 0.03, z =  5.00 },\r\n                            { x =  14.85, y = 0.03, z = -0.75 },\r\n                            { x =  14.85, y = 0.03, z = -6.50 }\r\n                        }\r\n                        return sitePositions[i]\r\n                    end,\r\n    worldDeck =     function(i) return {x = -14.53, y = 0.55, z = -9.9} end,\r\n}\r\n\r\n-- Rotations\r\nrot = {\r\n    dispossessed =  {x = 0,   y = 180,  z = 180},\r\n    denizen =       {x = 0, y = 180,   z = 0},\r\n    portal =        {x = 0,   y = 180, z = 0},\r\n    preview =       {x = 90,   y = 180, z = 0},\r\n    relic =         {x = 180, y = 0,   z = 0},\r\n    relicStack =    {x = 180, y = 0,   z = 0},\r\n    site =          {x = 0,   y = 180, z = 0},\r\n    worldDeck =     {x = 0,   y = 90,  z = 180},\r\n}\r\n\r\nsuits = {\"Arcane\",\"Beast\",\"Discord\",\"Hearth\",\"Nomad\",\"Order\"}\r\n\r\nsuitColors = {\r\n    Arcane = '#6f3788',\r\n    Beast = \"#a23723\",\r\n    Discord = \"#33190c\",\r\n    Hearth = \"#e54622\",\r\n    Nomad = \"#49a281\",\r\n    Order = \"#263f86\",\r\n  }\nend)\n__bundle_register(\"src/Utils/ColorUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"src/Utils/BidirectionalMap\")\r\n\r\n-- converts to and from oath color strings and rgb colors\r\nlocal oathColors = BidirectionalMap(\r\n  'Name', 'Color', \r\n  {\r\n    ['Red'] = Color.fromHex('F84713'),\r\n    ['Yellow'] = Color.fromHex('FFE600'),\r\n    ['Black'] = Color.fromHex('3F3F3F'),\r\n    ['Blue'] = Color.fromHex('36B4E6'),\r\n    ['Brown'] = Color.fromHex('B45D00'),\r\n    ['White'] = Color.fromHex('FFFFFF'),\r\n    ['Pink'] = Color.fromHex('E57BA6'),\r\n    ['Purple'] = Color.fromHex('CD41FF'),\r\n})\r\n\r\n-- converts to and from oath player colors, and TTS color names\r\nTTSColorMap = BidirectionalMap(\r\n  'OathColor', 'TTSColor',\r\n  {\r\n  ['Red'] = 'Red',\r\n  ['Yellow'] = 'Yellow',\r\n  ['Black'] = 'Green', -- black can't be used because it's assigned to the gamemaster\r\n  ['Blue'] = 'Blue',\r\n  ['Brown'] = 'Brown',\r\n  ['White'] = 'White',\r\n  ['Pink'] = 'Pink',\r\n  ['Purple'] = 'Purple',\r\n})\r\n\r\nfunction ColorAsVector(color)\r\n  return Vector(color.r, color.g, color.b)\r\nend\r\n\r\n-- given any rgb color, find the closest oath color name\r\nfunction GetBestFitOathColor(color)\r\n  local shortestDistance = 1000000000\r\n  local foundColor = nil\r\n  local colorVector = ColorAsVector(color)\r\n  for colorName, oathColor in pairs(oathColors.NameToColor) do\r\n    local distance = colorVector:distance(ColorAsVector(oathColor))\r\n    if distance < shortestDistance then\r\n      shortestDistance = distance\r\n      foundColor = colorName\r\n    end\r\n  end\r\n  return foundColor\r\nend\r\n\r\n-- given any rgb color, pick a TTS player color for it\r\nfunction GetBestFitTTSColor(color)\r\n  return TTSColorMap.OathColorToTTSColor[GetBestFitOathColor(color)]\r\nend\r\n\r\n-- Function to convert hex color to Color object (added early to not break buttons store)\r\nfunction hexToColor(hex)\r\n  -- Remove the \"#\" if it exists\r\n  hex = hex:gsub(\"#\", \"\")\r\n\r\n  -- Convert each pair of hex digits to decimal and then to float\r\n  local r = tonumber(hex:sub(1, 2), 16) / 255\r\n  local g = tonumber(hex:sub(3, 4), 16) / 255\r\n  local b = tonumber(hex:sub(5, 6), 16) / 255\r\n\r\n  -- Return the RGB values as floats\r\n  return Color(r, g, b)\r\nend\r\n\nend)\n__bundle_register(\"src/Utils/BidirectionalMap\", function(require, _LOADED, __bundle_register, __bundle_modules)\nfunction BidirectionalMap(nameA, nameB, AToB)\r\n  local result = {\r\n    [nameA..'To'..nameB] = AToB,\r\n    [nameB..'To'..nameA] = {},\r\n  }\r\n  for A, B in pairs(AToB) do\r\n    result[nameB..'To'..nameA][B] = A\r\n  end\r\n\r\n  return result\r\nend\nend)\nreturn __bundle_require(\"New Atlas Box.8f8e1a.lua\")",
      "LuaScriptState": "",
      "XmlUI": "",
      "JointFixed": {
        "ConnectedBodyGUID": "f8bd3c",
        "EnableCollision": false,
        "Axis": {
          "x": 1.0,
          "y": 0.0,
          "z": 0.0
        },
        "Anchor": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "ConnectedAnchor": {
          "x": -3.44827414,
          "y": -1.05580266E-05,
          "z": 0.000721832446
        },
        "BreakForce": 1E+07,
        "BreakTorgue": 1E+07
      }
    }
  ]
}