{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "804c02",
      "Name": "CardCustom",
      "Transform": {
        "posX": -34.41381,
        "posY": 1.55249882,
        "posZ": 31.95022,
        "rotX": 0.0168796312,
        "rotY": 179.994308,
        "rotZ": 0.07987461,
        "scaleX": 2.05722,
        "scaleY": 1.0,
        "scaleZ": 2.05722
      },
      "Nickname": "Atlas Portal",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 27300,
      "SidewaysCard": false,
      "CustomDeck": {
        "273": {
          "FaceURL": "https://steamusercontent-a.akamaihd.net/ugc/28808007230930194/1F86D3FBB5C36ED910DEF97736103A73263150D3/",
          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/28808007230930215/1853BB8F4493C3EC048FB824572B465246BCDD2F/",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "-- Bundled by luabundle {\"rootModuleName\":\"Atlas Portal.804c02.lua\",\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"Atlas Portal.804c02.lua\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"src/AtlasPortal\")\nend)\n__bundle_register(\"src/AtlasPortal\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- Atlas Box scripts written by harsch.  Last update:  02-01-2025\r\n\r\n\r\n-- ==============================\r\n-- CONFIGURATION\r\n-- ==============================\r\n\r\n-- GUIDs for needed items. IF SOMETHING IS BROKEN LIKELY THESE ARE NO LONGER CORRECT\r\nlocal GUIDs = {\r\n    atlasBox = \"f8bd3c\",\r\n    edifices = \"1662f7\",\r\n    relicBag = \"c46336\",\r\n    shadowBag = \"1ce44a\",\r\n    siteBag = \"12dafe\",\r\n    table = \"4ee1f2\",\r\n    map = \"d5dacf\",\r\n}\r\n\r\n-- Objects for needed game objects.\r\nlocal objects = {\r\n    atlasBox = nil,\r\n    edificeBag = nil,\r\n    relicBag = nil,\r\n    shadowBag = nil,\r\n    siteBag = nil,\r\n    table = nil,\r\n    map = nil\r\n}\r\n\r\n-- Function to convert hex color to Color object (added early to not break buttons store)\r\nfunction hexToColor(hex)\r\n    -- Remove the \"#\" if it exists\r\n    hex = hex:gsub(\"#\", \"\")\r\n\r\n    -- Convert each pair of hex digits to decimal and then to float\r\n    local r = tonumber(hex:sub(1, 2), 16) / 255\r\n    local g = tonumber(hex:sub(3, 4), 16) / 255\r\n    local b = tonumber(hex:sub(5, 6), 16) / 255\r\n\r\n    -- Return the RGB values as floats\r\n    return Color(r, g, b)\r\nend\r\n\r\n-- Buttons\r\nlocal buttons = {\r\n    retry = {\r\n        click_function = \"retry\",\r\n        function_owner = self,\r\n        label          = \"Fix missing objects \\n and click me \\n to retry\",\r\n        position       = {0, 0, 2.6},\r\n        scale          = {1.0,   1.0, 2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 1000,\r\n        height         = 500,\r\n        font_size      = 110,\r\n        color          = hexToColor(\"#823030\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Place missing objects and retry\", \r\n    },\r\n    retrieve = {\r\n        click_function = \"retrieveInit\",\r\n        function_owner = self,\r\n        label          = \"→ Summon a Site →\",\r\n        position       = {-1.85, 0, 0.85},\r\n        scale          = {1.0,   1.0,   2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 725,\r\n        height         = 400,\r\n        font_size      = 77,\r\n        color          = hexToColor(\"#588087\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Retrieve a Site and all objects there from the front of the Atlas Box\", \r\n    },\r\n    retrieveBack = {\r\n        click_function = \"retrieveBackInit\",\r\n        function_owner = self,\r\n        label          = \"→ (from the back) →\",\r\n        position       = {-1.85, 0, 2.},\r\n        scale          = {1.0,   1.0,   2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 725,\r\n        height         = 100,\r\n        font_size      = 50,\r\n        color          = hexToColor(\"#588087\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Retrieve a Site and all objects there from the back of the Atlas Box\", \r\n    },\r\n    setup = {\r\n        click_function = \"chronicleSetup\",\r\n        function_owner = self,\r\n        label          = \"Setup Initial\\nAtlas Box\\nand Sites\",\r\n        position       = {0, 0, 2.6},\r\n        scale          = {1.0,   1.0, 2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 1000,\r\n        height         = 500,\r\n        font_size      = 130,\r\n        color          = hexToColor(\"#4a915d\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Set Up the Atlas Box for a new Chronicle\", \r\n    },\r\n    spawnRelics = {\r\n        click_function = \"spawnRelics\",\r\n        function_owner = self,\r\n        label          = \"Retrieve Lost Relics\",\r\n        position       = {0, 0, 2.1},\r\n        scale          = {1.0,   1.0, 2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 1050,\r\n        height         = 250,\r\n        font_size      = 80,\r\n        font_color     = hexToColor(\"#e6bb4a\"),\r\n        color          = hexToColor(\"#8a363b\"),\r\n        tooltip        = \"Retrieve 10 relics from the Atlas Box if you run out\", \r\n    },\r\n    storeStaged = {\r\n        click_function = \"storeInit\",\r\n        function_owner = self,\r\n        position       = {-1.85, 0, -0.85},\r\n        scale          = {1.0,   1.0,   2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 725,\r\n        height         = 400,\r\n        font_size      = 77,\r\n        font_color     = {1, 1, 1, 1},\r\n        label          = \"←    Confirm?    ←\",\r\n        color          = hexToColor(\"#4a915d\"),\r\n        hover_color    = hexToColor(\"#58b872\"),\r\n        tooltip        = \"Confirm?\", \r\n    },\r\n    storeUnstaged = {\r\n        click_function = \"storeInit\",\r\n        function_owner = self,\r\n        position       = {-1.85, 0, -0.85},\r\n        scale          = {1.0,   1.0,   2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 725,\r\n        height         = 400,\r\n        font_size      = 77,\r\n        font_color     = {1, 1, 1, 1},\r\n        label          = \"← Into Atlas Box ←\",\r\n        color          = hexToColor(\"#588087\"),\r\n        hover_color    = nil,\r\n        tooltip        = \"Move Sites, Relics, Edifices and Shadow into the Atlas box\", \r\n    }\r\n}\r\n\r\n-- Tags to identify items\r\nlocal tags = {\r\n    chronicleCreated = \"chronicleCreated\",\r\n    edifice = \"Edifice\",\r\n    relic = \"Relic\",\r\n    shadow = \"Shadow\",\r\n    site = \"Site\",\r\n    unlocked = \"Unlocked\",\r\n}\r\n\r\n-- Name strings to use for Atlas Slots depending on their states\r\nlocal atlasSlotNames = {\r\n    empty = \"[Empty] Slot\",\r\n    full = \"[Full] Slot\"\r\n}\r\n\r\n-- Tables to track things on the portal\r\nlocal portal = {\r\n    edifices = {},\r\n    relics = {},\r\n    shadow = {},\r\n    sites = {},\r\n}\r\n\r\n-- {33.30, 1.45, 1.00}\r\n-- {33.30, 1.50, 0.00}\r\n\r\n-- Positions\r\nlocal pos = {\r\n    -- relative to site\r\n    denizen =       function(i) return {x = 5.35+3.3*i, y = 0.25, z = 0} end,\r\n    relic =         function(i) return {x = -0.15, y = 0.25*i, z = -1.3+1.3*i} end,\r\n    shadow =        function(i) return {x = -2.275, y = 1, z = 0.570} end,\r\n    -- relative to atlas portal\r\n    portal =        function(i) return {x = 0, y = 5, z = 0} end,\r\n    -- relative to map\r\n    relicStack =    function(i) return {x = -19.7, y = 0.55,  z = -9.9} end,\r\n    site =          function(i)\r\n                        local sitePositions = {\r\n                            { x = -26.55, y = 0.21, z =  5.00 },\r\n                            { x = -26.55, y = 0.21, z = -0.75 },\r\n                            { x = -06.10, y = 0.21, z =  5.00 },\r\n                            { x = -06.10, y = 0.21, z = -0.75 },\r\n                            { x = -06.10, y = 0.21, z = -6.50 },\r\n                            { x =  14.85, y = 0.21, z =  5.00 },\r\n                            { x =  14.85, y = 0.21, z = -0.75 },\r\n                            { x =  14.85, y = 0.21, z = -6.50 }\r\n                        }\r\n                        return sitePositions[i]\r\n                    end,\r\n}\r\n\r\n-- Rotations\r\nlocal rot = {\r\n    denizen =       {x = 180, y = 0,   z = 0},\r\n    portal =        {x = 0,   y = 180, z = 0},\r\n    relic =         {x = 180, y = 0,   z = 0},\r\n    relicStack =    {x = 180, y = 0,   z = 0},\r\n    shadow =        {x = 0,   y = 180, z = 0},\r\n    site =          {x = 0, y = 180,   z = 0},\r\n}\r\n\r\n-- ==============================\r\n-- INITIALIZATION\r\n-- ==============================\r\n\r\nfunction onLoad()\r\n    -- Create all needed tags by adding them to this object and then removing them\r\n    local tagsToAdd = {tags.site, tags.relic, tags.edifice, tags.shadow, tags.unlocked}\r\n    for _, tag in ipairs(tagsToAdd) do\r\n        self.addTag(tag)\r\n        self.removeTag(tag)\r\n    end\r\n\r\n    local chronicleExists = self.hasTag(tags.chronicleCreated)\r\n    -- If the chronicle is already created we can skip setup\r\n    if chronicleExists and setupAtlasBox() then\r\n        refreshStoreButton()\r\n        createButtons(buttons.retrieve, buttons.spawnRelics, buttons.retrieveBack)\r\n        return\r\n    -- If the chronicle is not created we need to spawn setup buttons\r\n    elseif not chronicleExists then\r\n        if setupObjects() then\r\n            tagAllItems() -- Tag all items in the bags\r\n            self.createButton(buttons.setup)\r\n        else \r\n            self.createButton(buttons.retry)\r\n        end\r\n    end\r\nend\r\n\r\n-- Validate that setup objects can be found and set them\r\nfunction setupObjects()\r\n    local setupTable = {\r\n        {objectName = \"table\", GUID = GUIDs.table, printableName = \"Table\"},\r\n        {objectName = \"atlasBox\", GUID = GUIDs.atlasBox, printableName = \"Atlas Box Bag\"},\r\n        {objectName = \"edificeBag\", GUID = GUIDs.edifices, printableName = \"Edifices Bag\"},\r\n        {objectName = \"relicBag\", GUID = GUIDs.relicBag, printableName = \"Relic Bag\"},\r\n        {objectName = \"shadowBag\", GUID = GUIDs.shadowBag, printableName = \"Shadow Denizens Bag\"},\r\n        {objectName = \"siteBag\", GUID = GUIDs.siteBag, printableName = \"Site Bag\"},\r\n        {objectName = \"map\", GUID = GUIDs.map, printableName = \"Map\"}\r\n    }\r\n    local foundAll = true\r\n    for _, setupItem in ipairs(setupTable) do\r\n        objects[setupItem.objectName] = getObjectFromGUID(setupItem.GUID)\r\n        if objects[setupItem.objectName] == nil then\r\n            printToAll(\"ERROR: Cannot find \" .. setupItem.printableName .. \" by GUID\")\r\n            foundAll = false\r\n        end\r\n    end\r\n    return foundAll\r\nend\r\n\r\n-- Check that the Atlas Box can be found\r\nfunction setupAtlasBox()\r\n    objects.atlasBox = getObjectFromGUID(GUIDs.atlasBox)\r\n    if objects.atlasBox == nil then\r\n        printToAll(\"ERROR: Cannot find Atlas Box Bag by GUID\")\r\n        self.createButton(buttons.retry)\r\n        return false\r\n    end\r\n    return true\r\nend\r\n\r\n-- Create the button for storing items in the atlas box.\r\n--    This button is dynamic and will change text and color for confirming storage \r\nfunction refreshStoreButton()\r\n    local staged = #portal.sites + #portal.relics + #portal.edifices + #portal.shadow > 0\r\n    removeButtons(buttons.storeUnstaged, buttons.storeStaged)\r\n    self.createButton(staged and buttons.storeStaged or buttons.storeUnstaged)\r\nend\r\n\r\n-- Remove all buttons\r\nfunction retry()\r\n    removeButtons(buttons.retry)\r\n    onLoad()\r\nend\r\n\r\n-- Tag all items in bags\r\nfunction tagAllItems()\r\n    local bagTags = { \r\n        {bag = objects.relicBag,    tag = tags.relic},\r\n        {bag = objects.edificeBag,  tag = tags.edifice},\r\n        {bag = objects.shadowBag,   tag = tags.shadow}\r\n    }\r\n    for _, bagTag in ipairs(bagTags) do\r\n        local bag, tag = bagTag.bag, bagTag.tag\r\n        for _, item in ipairs(bag.getObjects()) do\r\n            bag.putObject(addTagAndReturn(bag.takeObject({guid = item.guid}), tag))\r\n        end\r\n    end\r\nend\r\n\r\n-- ==============================\r\n-- CHRONICLE SETUP\r\n-- ==============================\r\n\r\nfunction chronicleSetup(obj, color, alt_click)\r\n    if not alt_click then\r\n        -- If items are missing we need to retry setup\r\n        if not setupObjects() then\r\n            removeButtons(buttons.setup)\r\n            self.createButton(buttons.retry)\r\n            return\r\n        end\r\n        local mapTransform = {position = objects.map.getPosition(), rotation = objects.map.getRotation()}\r\n        -- Take all sites and put them in the Atlas Box. Roll a d6 and add additional items depending on the roll\r\n        local numSites = #objects.siteBag.getObjects()\r\n        for i = 1, numSites do\r\n            local atlasSlotBag = getAtlasBag(numSites-i)\r\n            rollAndAddItems(atlasSlotBag, i)\r\n            putAtlasBag(atlasSlotBag)\r\n        end\r\n        -- Deal Starting Sites\r\n        for siteNumber = 1,8 do\r\n            local atlasSlotBag = getAtlasBag(0)\r\n            spawnAllFromBagAtTransform(atlasSlotBag, getTransformStruct(\"site\", siteNumber, mapTransform))\r\n            putAtlasBag(atlasSlotBag)\r\n        end\r\n        -- Clean up contents of remaining bags\r\n        local bagsAndTransforms = {\r\n            {bag = objects.edificeBag, transform = {position = objects.edificeBag.getPosition(), rotation = {x=0,y=180,z=0}}},\r\n            {bag = objects.relicBag, transform = getTransformStruct(\"relicStack\", 0, mapTransform)}\r\n        }\r\n        for _, bagAndTransform in ipairs(bagsAndTransforms) do\r\n            for _, item in ipairs(bagAndTransform.bag.getObjects()) do\r\n                bagAndTransform.bag.takeObject(bagAndTransform.transform)\r\n            end\r\n        end\r\n\r\n        -- Clean up the bags and add the chronicle created tag\r\n        self.addTag(tags.chronicleCreated)\r\n        removeButtons(buttons.setup)\r\n        destroyObject(objects.siteBag)\r\n        destroyObject(objects.edificeBag)\r\n        destroyObject(objects.relicBag)\r\n        printToAll(\"SETUP COMPLETE. Don't forget to add Edifices back to the corresponding suit decks before setting up the World Deck\\n\")\r\n        refreshStoreButton()\r\n        createButtons(buttons.retrieve, buttons.spawnRelics, buttons.retrieveBack)\r\n    end\r\nend\r\n\r\nfunction rollAndAddItems(atlasSlotBag, i)\r\n    local rollResults = {\r\n        [1] = {getRandomEdifice},\r\n        [2] = {},\r\n        [3] = {getRandomRelic},\r\n        [4] = {getRandomRelic, getRandomRelic},\r\n        [5] = {getRandomShadow, getRandomRelic},\r\n        [6] = {getRandomShadow, getRandomRelic, getRandomRelic}\r\n    }\r\n    local d6roll = math.random(1,6)\r\n    printToAll(\"Slot \" .. i .. \", Roll \" .. d6roll)\r\n    atlasSlotBag.putObject(getRandomSite())\r\n    for _, func in ipairs(rollResults[d6roll] or {}) do\r\n        atlasSlotBag.putObject(func())\r\n    end\r\nend\r\n\r\n-- Get Elements for creating Chronicle\r\nfunction getRandomShadow()\r\n    return getRandomObjectFromContainer(objects.shadowBag, false)\r\nend\r\nfunction getRandomRelic()\r\n    return getRandomObjectFromContainer(objects.relicBag, false)\r\nend\r\nfunction getRandomSite()\r\n    local site = getRandomObjectFromContainer(objects.siteBag, false)\r\n    addTagAndReturn(site, tags.site).setRotation({x=0,y=180,z=0})\r\n    return site\r\nend\r\nfunction getRandomEdifice()\r\n    return getRandomObjectFromContainer(objects.edificeBag, true)\r\nend\r\n\r\n-- ==============================\r\n-- ATLAS BOX STORAGE\r\n-- ==============================\r\n\r\n-- Called by button\r\nfunction storeInit()\r\n    if setupAtlasBox() then\r\n        createPortalZone(store)\r\n    end\r\nend\r\n\r\n-- Creates zone for storing objects and calls the callback\r\nfunction createPortalZone(callback)\r\n    local cardSize = self.getVisualBoundsNormalized()[\"size\"]\r\n    spawnObject({\r\n        type = \"FogOfWarTrigger\",\r\n        position = vectorSum(self.getPosition(), {x = 0, y = 100, z = 0}),\r\n        scale = {cardSize.x, 200, cardSize.z},\r\n        sound = false,\r\n        callback_function = function(spawned_object)\r\n            spawned_object.setColorTint(hexToColor(\"#ff00ff\"))\r\n            Wait.time(function()\r\n                callback(spawned_object)\r\n                destroyObject(spawned_object)\r\n            end, 0.10)\r\n            \r\n        end\r\n    })\r\nend\r\n\r\n-- Store objects in the Atlas Box\r\nfunction store(zone)\r\n    local tagsAndPortalObjs = {\r\n        {tag = tags.site, data = portal.sites, printableName = \"Site\", },\r\n        {tag = tags.relic, data = portal.relics, printableName = \"Relic(s)\"},\r\n        {tag = tags.edifice, data = portal.edifices, printableName = \"Edifice\"},\r\n        {tag = tags.shadow, data = portal.shadow, printableName = \"Shadow\"},\r\n    }\r\n    \r\n    -- First time we validate the objects and check with the user\r\n    if #portal.sites + #portal.relics + #portal.edifices + #portal.shadow == 0 then\r\n        countAndValidatePortalItems(zone, tagsAndPortalObjs)\r\n        return\r\n\r\n    -- Subsequent times we actually store the objects into the atlasbox\r\n    else\r\n        -- Check that all objects match last button press\r\n        local perfectMatch = true\r\n        local itemCount = #portal.sites + #portal.relics + #portal.edifices + #portal.shadow\r\n        for _, obj in ipairs(zone.getObjects(true)) do\r\n            for _, tagAndPortalObj in ipairs(tagsAndPortalObjs) do\r\n                if obj.hasTag(tagAndPortalObj.tag) then\r\n                    perfectMatch = dataTableContains(tagAndPortalObj.data, obj)\r\n                    itemCount = itemCount - 1\r\n                end\r\n            end\r\n            if not perfectMatch then break end\r\n        end\r\n        if itemCount > 0 or not perfectMatch then \r\n            printToAll(\"ERROR: Objects on the Atlas Portal have changed since the last button press. Aborting storage.\\n\")\r\n            emptyStoredPortalObjs()\r\n            return\r\n        end\r\n\r\n        -- Store the objects in the Atlas Box in the empty slot closest to the front\r\n        local foundEmptyBag = false\r\n        for i = 1, #objects.atlasBox.getObjects() do\r\n            local atlasSlotBag = getAtlasBag(0)\r\n            if not foundEmptyBag and #atlasSlotBag.getObjects() == 0 then\r\n                foundEmptyBag = true\r\n                for _, data in ipairs(tagsAndPortalObjs) do\r\n                    for _, obj in ipairs(data.data) do\r\n                        atlasSlotBag.putObject(obj)\r\n                    end\r\n                end\r\n                printToAll(\"Stored objects in Slot number \" .. i .. \"\\n\")\r\n            end\r\n            putAtlasBag(atlasSlotBag)\r\n        end\r\n        emptyStoredPortalObjs()\r\n    end\r\nend\r\n\r\nfunction countAndValidatePortalItems(zone, tagsAndPortalObjs)\r\n    for _, obj in ipairs(zone.getObjects(true)) do\r\n        for _, tagAndPortalObj in ipairs(tagsAndPortalObjs) do\r\n            if obj.hasTag(tagAndPortalObj.tag) then table.insert(tagAndPortalObj.data, obj) end\r\n        end\r\n    end\r\n    local messageParts = {}\r\n    for _, tagAndPortalObj in ipairs(tagsAndPortalObjs) do\r\n        if #tagAndPortalObj.data > 0 then\r\n            table.insert(messageParts, #tagAndPortalObj.data .. \" \" .. tagAndPortalObj.printableName)\r\n        end\r\n    end\r\n    if #messageParts > 0 then\r\n        printToAll(\"Detected \" .. table.concat(messageParts, \", \") .. \" on the Atlas Portal.\")\r\n        if not #portal.sites == 0 or #portal.relics > 3 then \r\n            if #portal.sites < 1 then printToAll(\"ERROR: Missing a Site. Try again after placing a Site on the Atlas Portal.\\n\") end\r\n            if #portal.sites > 1 then printToAll(\"ERROR: Too many Sites. Try again after removing Sites from the Atlas Portal until there is only one.\\n\") end\r\n            if #portal.relics > 3 then printToAll(\"ERROR: More than 3 Relics. Try again after removing some Relics from the Atlas Portal.\\n\") end\r\n            emptyStoredPortalObjs()\r\n            return\r\n        end\r\n        if #portal.shadow > 1 then printToAll(\"More than 1 Shadow. This is not typical but may be an exceptional case with current rules.\") end\r\n        refreshStoreButton()\r\n        printToAll(\"Click the send button again to confirm.\\n\")\r\n    else\r\n        printToAll(\"No objects on the Atlas Portal to send.\\n\")\r\n    end\r\nend\r\n\r\nfunction emptyStoredPortalObjs()\r\n    portal.sites, portal.relics, portal.edifices, portal.shadow = {}, {}, {}, {} \r\n    refreshStoreButton()\r\nend\r\n\r\n-- ==============================\r\n-- ATLAS BOX RETRIEVAL\r\n-- ==============================\r\n\r\nfunction retrieveInit()\r\n    if setupAtlasBox() then\r\n        createPortalZone(retrieve)\r\n    end\r\nend\r\n\r\nfunction retrieve(zone)\r\n    if not isPortalEmpty(zone) then\r\n        return\r\n    end\r\n\r\n    -- Set up variables for spawning\r\n    local spawnTransform = getTransformStruct(\"portal\", 0, {position= self.getPosition(), rotation = self.getRotation()})\r\n    local countsAndTags = {\r\n        {tag = tags.relic, data = {count = 0, printName = \"Relic(s)\"}},\r\n        {tag = tags.edifice, data = {count = 0, printName = \"Edifice\"}},\r\n        {tag = tags.shadow, data = {count = 0, printName = \"Shadow\"}},\r\n    }\r\n\r\n    -- Spawn the frontmost bags contents\r\n    local atlasSlotBag = getAtlasBag(0)\r\n    for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n        for _, countAndTag in ipairs(countsAndTags) do\r\n            if dataTableContains(obj.tags, countAndTag.tag) then\r\n                countAndTag.data.count = countAndTag.data.count + 1\r\n            end\r\n        end\r\n    end\r\n    self.setLock(true)\r\n    spawnAllFromBagAtTransform(atlasSlotBag, spawnTransform)\r\n    putAtlasBag(atlasSlotBag)\r\n    \r\n    -- Print message with what was summoned\r\n    local messageParts = {}\r\n    for _, countAndTag in ipairs(countsAndTags) do\r\n        if countAndTag.data.count > 0 then\r\n            table.insert(messageParts, countAndTag.data.count .. \" \" .. countAndTag.data.printName)\r\n        end\r\n    end\r\n    printToAll(#messageParts > 0 and (\"Summoning Site with \" .. table.concat(messageParts, \", \") .. \"\\n\") or (\"Summoning Empty Site\\n\"))\r\nend\r\n\r\nfunction retrieveBackInit()\r\n    if setupAtlasBox() then\r\n        createPortalZone(retrieveBack)\r\n    end\r\nend\r\n\r\nfunction retrieveBack(zone)\r\n    if not isPortalEmpty(zone) then\r\n        return\r\n    end\r\n\r\n    -- Set up variables for spawning\r\n    local spawnTransform = getTransformStruct(\"portal\", 0, {position= self.getPosition(), rotation = self.getRotation()})\r\n    local countsAndTags = {\r\n        {tag = tags.relic, data = {count = 0, printName = \"Relic(s)\"}},\r\n        {tag = tags.edifice, data = {count = 0, printName = \"Edifice\"}},\r\n        {tag = tags.shadow, data = {count = 0, printName = \"Shadow\"}},\r\n    }\r\n\r\n    -- Get the backmost full bag\r\n    local lastFullBagIndex = 0\r\n    for i = 0, #objects.atlasBox.getObjects()-1 do\r\n        local atlasSlotBag = getAtlasBag(0)\r\n        if #atlasSlotBag.getObjects() > 0 then\r\n            lastFullBagIndex = i\r\n        end\r\n        putAtlasBag(atlasSlotBag)\r\n    end\r\n\r\n    -- Spawn the backmost bags contents\r\n    local atlasSlotBag = getAtlasBag(lastFullBagIndex)\r\n    for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n        for _, countAndTag in ipairs(countsAndTags) do\r\n            if dataTableContains(obj.tags, countAndTag.tag) then\r\n                countAndTag.data.count = countAndTag.data.count + 1\r\n            end\r\n        end\r\n    end\r\n    self.setLock(true)\r\n    spawnAllFromBagAtTransform(atlasSlotBag, spawnTransform)\r\n    putAtlasBag(atlasSlotBag)\r\n    \r\n    -- Print message with what was summoned\r\n    local messageParts = {}\r\n    for _, countAndTag in ipairs(countsAndTags) do\r\n        if countAndTag.data.count > 0 then\r\n            table.insert(messageParts, countAndTag.data.count .. \" \" .. countAndTag.data.printName)\r\n        end\r\n    end\r\n    printToAll(#messageParts > 0 and (\"Summoning Site with \" .. table.concat(messageParts, \", \") .. \"\\n\") or (\"Summoning Empty Site\\n\"))\r\nend\r\n\r\n--- ==============================\r\n--- ATLAS BOX RELIC RETRIEVAL\r\n--- ==============================\r\n\r\n-- Try to get 10 relics from the Atlas Box \r\nfunction spawnRelics()\r\n    local relicCount = 0    \r\n    for i = 1, #objects.atlasBox.getObjects() do\r\n        local atlasSlotBag = getAtlasBag(0)\r\n        local mapTransform = {position = objects.map.getPosition(), rotation = objects.map.getRotation()}\r\n        if relicCount < 10 then\r\n            for _, item in ipairs(atlasSlotBag.getObjects()) do\r\n                if relicCount < 10 and dataTableContains(item.tags, tags.relic) then\r\n                    local transform = getTransformStruct(\"relicStack\", 0, mapTransform)\r\n                    atlasSlotBag.takeObject({\r\n                        guid = item.guid,\r\n                        position = transform.position,\r\n                        rotation = transform.rotation,\r\n                    })\r\n                    relicCount = relicCount + 1\r\n                end\r\n            end\r\n        end\r\n        putAtlasBag(atlasSlotBag)\r\n    end\r\n    printToAll(\"Retrieved \" .. relicCount .. \" relics from the Atlas Box\")\r\nend\r\n\r\n-- ==============================\r\n-- UTILITY\r\n-- ==============================\r\n\r\n-- Override Site Flip wtih recolor\r\nfunction onPlayerAction(player, action, targets)\r\n    if action == Player.Action.FlipOver and #targets == 1 and targets[1].hasTag(tags.site) then\r\n        if targets[1].getColorTint() == Color(0,0,0) then\r\n            targets[1].setColorTint(Color(1,1,1))\r\n        else\r\n            targets[1].setColorTint(Color(0,0,0))\r\n        end\r\n        return false\r\n    end\r\n    return true\r\nend\r\n\r\n-- Get Atlas Slot Bag from the Atlas Box and relock if needed\r\nfunction getAtlasBag(i)\r\n    local wasUnlocked = objects.atlasBox.hasTag(tags.unlocked)\r\n    objects.atlasBox.addTag(tags.unlocked)\r\n    local atlasSlotBag = objects.atlasBox.takeObject({index = i})\r\n    if not wasUnlocked then objects.atlasBox.removeTag(tags.unlocked) end\r\n    return atlasSlotBag\r\nend\r\n\r\n-- Put Atlas Slot Bag into the Atlas Box and relock if needed\r\nfunction putAtlasBag(bag)\r\n    local wasUnlocked = objects.atlasBox.hasTag(tags.unlocked)\r\n    objects.atlasBox.addTag(tags.unlocked)\r\n    if #bag.getObjects() > 0 then\r\n        bag.setName(atlasSlotNames.full)\r\n    else\r\n        bag.setName(atlasSlotNames.empty)\r\n    end\r\n    objects.atlasBox.putObject(bag)\r\n    if not wasUnlocked then objects.atlasBox.removeTag(tags.unlocked) end\r\nend\r\n\r\n-- Get transform for a given tag and index\r\n    -- Can provide a base position\r\nfunction getTransformStruct(tag, index, baseTransform)\r\n    return {\r\n        position = vectorSum(\r\n            pos[tag](index or 1), \r\n            (baseTransform and baseTransform.position or {x=0,y=0,z=0})\r\n        ),\r\n        rotation = rot[tag],\r\n    }\r\nend\r\n\r\n-- Spawn all objects from a bag at a given position and rotation\r\nfunction spawnAllFromBagAtTransform(bag, baseTransform) \r\n    local relicNumber, denizenNumber, denizenCount = 0, 0, 0;\r\n    local atlasObjects = bag.getObjects()\r\n    for _, obj in ipairs(atlasObjects) do\r\n        if dataTableContains(obj.tags, tags.edifice) then\r\n            denizenCount = denizenCount + 1\r\n        end\r\n    end\r\n    for _, obj in ipairs(atlasObjects) do\r\n        local transform = nil\r\n        if dataTableContains(obj.tags, tags.site) then\r\n            transform = baseTransform\r\n        elseif dataTableContains(obj.tags, tags.shadow) then\r\n            transform = getTransformStruct(\"shadow\", 0, baseTransform)\r\n        elseif dataTableContains(obj.tags, tags.edifice) then\r\n            transform = getTransformStruct(\"denizen\", denizenNumber, baseTransform)\r\n            denizenNumber = denizenNumber+1\r\n        elseif dataTableContains(obj.tags, tags.relic) then\r\n            transform = getTransformStruct(\"relic\", relicNumber, getTransformStruct(\"denizen\", denizenCount, baseTransform))\r\n            relicNumber = relicNumber+1\r\n        end\r\n        if transform then\r\n            local bagObj = bag.takeObject({\r\n                guid = obj.guid, \r\n                position = transform.position,\r\n                rotation = transform.rotation,\r\n            })\r\n            -- it takes the sites a moment to load so lock objects for a moment so colliders work properly\r\n            Wait.condition(\r\n                function()\r\n                    bagObj.setLock(true)\r\n                    Wait.time(function()\r\n                        bagObj.setLock(false)\r\n                    end, 3)\r\n                end,\r\n                function()\r\n                    return not bagObj.isSmoothMoving()\r\n                end\r\n            )\r\n            if dataTableContains(obj.tags, tags.site) then bagObj.setColorTint(Color(0,0,0)) end\r\n        end\r\n    end\r\nend\r\n\r\nfunction isPortalEmpty(zone)\r\n    -- Validate that the portal is empty\r\n    if #portal.sites + #portal.edifices + #portal.relics + #portal.shadow > 0 then\r\n        printToAll(\"ERROR: Cannot Summon while storing sites\\n\")\r\n        return false\r\n    end\r\n    for _, obj in ipairs(zone.getObjects(true)) do\r\n        if obj.hasTag(tags.site) or obj.hasTag(tags.relic) or obj.hasTag(tags.edifice) or obj.hasTag(tags.shadow) then\r\n            printToAll(\"ERROR: Cannot Summon while pieces are on the Portal\\n\")\r\n            return false\r\n        end\r\n    end\r\n    return true\r\nend\r\n\r\n-- ==============================\r\n-- GENERAL ULILTIY\r\n-- ==============================\r\n\r\nfunction dataTableContains(table, x)\r\n    for _, obj in ipairs(table) do\r\n        if obj == x then return true end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getRandomObjectFromContainer(container, flipped)\r\n    local objects = container.getObjects()\r\n    if #objects == 0 then return nil end  -- Prevent errors when bag is empty\r\n    local selected = objects[math.random(1, #objects)]\r\n\r\n    return container.takeObject({\r\n        guid = selected.guid,\r\n        position = vectorSum(container.getPosition(), {x = 0, y = 5, z = 0}),\r\n        rotation = flipped and vectorSum({x = 180, y = 180, z = 0},container.getRotation()) or container.getRotation(),\r\n    })\r\nend\r\n\r\nfunction vectorSum(v1, v2)\r\n    return {\r\n        x = v1.x + v2.x,\r\n        y = v1.y + v2.y,\r\n        z = v1.z + v2.z\r\n    }\r\nend\r\n\r\nfunction removeButtons(...)\r\n    local buttonsToRemove = {...}\r\n    for _, buttonToRemove in ipairs(buttonsToRemove) do\r\n        local buttonIndex = nil\r\n        if self.getButtons() then\r\n            for i, button in ipairs(self.getButtons()) do\r\n                if button and button.label == buttonToRemove.label then\r\n                    buttonIndex = button.index\r\n                    break\r\n                end\r\n            end\r\n            if buttonIndex then self.removeButton(buttonIndex) end\r\n        end\r\n    end\r\nend\r\n\r\nfunction createButtons(...)\r\n    local buttonsToCreate = {...}\r\n    for _, buttonToCreate in ipairs(buttonsToCreate) do\r\n        self.createButton(buttonToCreate)\r\n    end\r\nend\r\n\r\nfunction addTagAndReturn(item, tag)\r\n    item.addTag(tag)\r\n    return item\r\nend\nend)\nreturn __bundle_require(\"Atlas Portal.804c02.lua\")",
      "LuaScriptState": "",
      "XmlUI": ""
    }
  ]
}