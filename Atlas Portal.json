{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "804c02",
      "Name": "CardCustom",
      "Transform": {
        "posX": -34.72236,
        "posY": 1.55310929,
        "posZ": 32.5624733,
        "rotX": 0.01687126,
        "rotY": 179.999908,
        "rotZ": 0.07987622,
        "scaleX": 2.05722,
        "scaleY": 1.0,
        "scaleZ": 2.05722
      },
      "Nickname": "Atlas Portal",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 27300,
      "SidewaysCard": false,
      "CustomDeck": {
        "273": {
          "FaceURL": "https://steamusercontent-a.akamaihd.net/ugc/28808007230930194/1F86D3FBB5C36ED910DEF97736103A73263150D3/",
          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/28808007230930215/1853BB8F4493C3EC048FB824572B465246BCDD2F/",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "-- Bundled by luabundle {\"rootModuleName\":\"Atlas Portal.804c02.lua\",\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"Atlas Portal.804c02.lua\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"src/AtlasPortal\")\nend)\n__bundle_register(\"src/AtlasPortal\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- Atlas Box scripts written by harsch.  Last update:  12-18-2024\r\n\r\n-- GUIDs for needed items. IF SOMETHING IS BROKEN LIKELY THESE ARE NO LONGER CORRECT\r\ntableGUID = \"4ee1f2\"\r\natlasBoxGUID = \"f8bd3c\"\r\nedificesGUID = \"1662f7\"\r\nrelicBagGUID = \"c46336\"\r\nshadowBagGUID = \"1ce44a\"\r\nsiteBagGUID = \"12dafe\"\r\ncurseDeckGUID = \"505f2f\"\r\n\r\n-- Objects for needed items.\r\ntableObj, atlasBox, edificeBag, relicBag, shadowBag, siteBag = nil, nil, nil, nil, nil, nil\r\n\r\n-- Labels for buttons.\r\nsetupButtonLabel = \"Setup Initial\\nAtlas Box\\nand Sites\"\r\nretryButtonLabel = \"Fix missing objects \\n and click me \\n to retry\"\r\nstoreButtonLabel        = \"← Into Atlas Box ←\"\r\nstoreButtonLabelConfirm = \"←    Confirm?    ←\"\r\nretrieveButtonLabel = \"→ Summon a Site →\"\r\nspawnRelicsButtonLabel = \"Retrieve Lost Relics\"\r\n\r\n-- Tags to identify items\r\nsiteTag = \"Site\"\r\nrelicTag = \"Relic\"\r\nedificeTag = \"Edifice\"\r\nshadowTag = \"Shadow\"\r\n\r\n-- Tag for marking that set up is complete\r\nchronicleCreatedTag = \"chronicleCreated\"\r\n\r\n-- Tag to mark the atlas box as locked or unlocked\r\nunlockedTag = \"Unlocked\"\r\n\r\n-- Name strings to use for Atlas Slots depending on their states\r\nemptyAtlasSlotBagName = \"[Empty] Slot\"\r\nfullAtlasSlotBagName = \"[Full] Slot\"\r\n\r\n-- Tables to track things on the portal\r\nportalSites = {}\r\nportalRelics = {}\r\nportalEdifices = {}\r\nportalShadow = {}\r\n\r\nfunction onLoad()\r\n    setupTags()\r\n\r\n    atlasBox = getObjectFromGUID(atlasBoxGUID)\r\n    if self.hasTag(chronicleCreatedTag) then\r\n        if atlasBox == nil then\r\n            printToAll(\"ERROR: Cannot find Atlas Box Bag by GUID\")\r\n            spawnRetryButton()\r\n            return\r\n        end\r\n        spawnAtlasButtons()\r\n        return\r\n    else\r\n        if checkForSetupObjects() then\r\n            tagAllItems()\r\n            spawnChronicleSetupButton()\r\n        else \r\n            spawnRetryButton()\r\n        end\r\n    end\r\nend\r\n\r\n-- Create all needed tags by adding them to this object and then removing them\r\nfunction setupTags() \r\n    tags = {siteTag, relicTag, edificeTag, shadowTag, unlocked}\r\n    for _, tag in ipairs(tags) do\r\n        self.addTag(tag)\r\n        self.removeTag(tag)\r\n    end\r\n    -- We don't want to overwrite the value if the tag is already there\r\n    if not self.hasTag(chronicleCreatedTag) then\r\n        self.addTag(chronicleCreatedTag)\r\n        self.removeTag(chronicleCreatedTag)\r\n    end\r\nend\r\n\r\n-- Validate that setup objects can be found \r\nfunction checkForSetupObjects()\r\n    tableObj = getObjectFromGUID(tableGUID)\r\n    edificeBag = getObjectFromGUID(edificesGUID)\r\n    relicBag = getObjectFromGUID(relicBagGUID)\r\n    shadowBag = getObjectFromGUID(shadowBagGUID)\r\n    siteBag = getObjectFromGUID(siteBagGUID)\r\n    if not tableObj then printToAll(\"ERROR: Cannot find Table by GUID\") end\r\n    if not atlasBox then printToAll(\"ERROR: Cannot find Atlas Box Bag by GUID\") end\r\n    if not edificeBag then printToAll(\"ERROR: Cannot find Edifices Bag by GUID\") end\r\n    if not relicBag then printToAll(\"ERROR: Cannot find Relic Bag by GUID\") end\r\n    if not shadowBag then printToAll(\"ERROR: Cannot find Shadow Denizens Bag by GUID\") end\r\n    if not siteBag then printToAll(\"ERROR: Cannot find Site Bag\") end\r\n\r\n    if tableObj and atlasBox and edificeBag and relicBag and shadowBag and siteBag then\r\n        return true\r\n    end\r\n    return false\r\nend\r\n\r\n-- Check that the Atlas Box can be found\r\nfunction checkForAtlasObjects()\r\n    atlasBox = getObjectFromGUID(atlasBoxGUID)\r\n    if atlasBox == nil then\r\n        printToAll(\"ERROR: Cannot find Atlas Box Bag by GUID\")\r\n        spawnRetryButton()\r\n        return false\r\n    end\r\n    return true\r\nend\r\n\r\n-- Create the Buttons for working with the AtlasBox\r\nfunction spawnAtlasButtons()\r\n    refreshStoreButton()\r\n    params = {\r\n        click_function = \"retrieveInit\",\r\n        function_owner = self,\r\n        label          = retrieveButtonLabel,\r\n        position       = {-1.85, 0, 0.85},\r\n        scale          = {1.0,   1.0,   2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 725,\r\n        height         = 400,\r\n        font_size      = 77,\r\n        color          = hexToColor(\"#588087\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Retrieve a Site and all objects there from the Atlas Box\", \r\n    }\r\n    self.createButton(params)\r\n    params = {\r\n        click_function = \"spawnRelics\",\r\n        function_owner = self,\r\n        label          = spawnRelicsButtonLabel,\r\n        position       = {0, 0, 2.1},\r\n        scale          = {1.0,   1.0, 2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 1050,\r\n        height         = 250,\r\n        font_size      = 80,\r\n        font_color     = hexToColor(\"#e6bb4a\"),\r\n        color          = hexToColor(\"##8a363b\"),\r\n        tooltip        = \"Retrieve 10 relics from the Atlas Box if you run out\", \r\n    }\r\n    self.createButton(params)\r\nend\r\n\r\n-- Create the button for storing items in the atlas box.\r\n--    This button is dynamic and will change text and color for confirming storage \r\nfunction refreshStoreButton()\r\n    stagedStorage = (#portalSites + #portalRelics + #portalEdifices + #portalShadow) > 0\r\n    removeButtonByLabel(self, storeButtonLabel)\r\n    removeButtonByLabel(self, storeButtonLabelConfirm)\r\n    params = {\r\n        click_function = \"storeInit\",\r\n        function_owner = self,\r\n        position       = {-1.85, 0, -0.85},\r\n        scale          = {1.0,   1.0,   2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 725,\r\n        height         = 400,\r\n        font_size      = 77,\r\n        font_color     = {1, 1, 1, 1},\r\n        label          = stagedStorage and storeButtonLabelConfirm or storeButtonLabel,\r\n        color          = stagedStorage and hexToColor(\"#4a915d\") or hexToColor(\"#588087\"),\r\n        hover_color    = stagedStorage and hexToColor(\"#58b872\") or nil,\r\n        tooltip        = stagedStorage and \"Confirm?\" or \"Move Sites, Relics, Edifices and Shadow into the Atlas box\", \r\n        \r\n    }\r\n    self.createButton(params)\r\nend\r\n\r\n-- Create the button for setting up the initial chronicle\r\nfunction spawnChronicleSetupButton()\r\n    params = {\r\n        click_function = \"setupAtlasBox\",\r\n        function_owner = self,\r\n        label          = setupButtonLabel,\r\n        position       = {0, 0, 2.6},\r\n        scale          = {1.0,   1.0, 2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 1000,\r\n        height         = 500,\r\n        font_size      = 130,\r\n        color          = hexToColor(\"#4a915d\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Set Up the Atlas Box for a new Chronicle\", \r\n    }\r\n    self.createButton(params)\r\nend\r\n\r\n-- Create the button for retrying a load if something is missing\r\nfunction spawnRetryButton()\r\n    params = {\r\n        click_function = \"retry\",\r\n        function_owner = self,\r\n        label          = retryButtonLabel,\r\n        position       = {0, 0, 2.6},\r\n        scale          = {1.0,   1.0, 2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 1000,\r\n        height         = 500,\r\n        font_size      = 110,\r\n        color          = hexToColor(\"#823030\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Place missing objects and retry\", \r\n    }\r\n    self.createButton(params)\r\nend\r\n\r\nfunction retry()\r\n    removeButtonByLabel(self, retryButtonLabel)\r\n    onLoad()\r\nend\r\n\r\n--\r\n-- CHRONICLE SETUP\r\n--\r\n\r\nfunction setupAtlasBox(obj, color, alt_click)\r\n    if not alt_click then\r\n        -- If items are missing we need to retry setup\r\n        if not checkForSetupObjects() then\r\n            removeButtonByLabel(self, setupButtonLabel)\r\n            spawnRetryButton()\r\n            return\r\n        end\r\n\r\n        -- If edifice bag is empty\r\n        if #(edificeBag.getObjects()) == 0 then\r\n            printToAll(\"Please place all Edifices in the Edifice bag and try again.\")\r\n        else\r\n            -- Gotta unlock the Atlas Box first\r\n            local wasUnlocked = atlasBox.hasTag(unlockedTag)\r\n            atlasBox.addTag(unlockedTag)\r\n            -- Take all 20 sites and put them in the Atlas Box. Roll a d6 and add additional items depending on the roll\r\n            for i = 1,20 do\r\n                local atlasSlotBag = atlasBox.takeObject({index = 20-i})\r\n                atlasSlotBag.putObject(getRandomSite())\r\n                local d6roll = math.random(1,6)\r\n                printToAll(\"Slot \" .. i .. \", Roll \" .. d6roll)\r\n                if d6roll == 1 then\r\n                    atlasSlotBag.putObject(getRandomEdifice())\r\n                elseif d6roll == 3 then\r\n                    atlasSlotBag.putObject(getRandomRelic())\r\n                elseif d6roll == 4 then\r\n                    atlasSlotBag.putObject(getRandomRelic())\r\n                    atlasSlotBag.putObject(getRandomRelic())\r\n                elseif d6roll == 5 then\r\n                    atlasSlotBag.putObject(getRandomRelic())\r\n                    atlasSlotBag.putObject(getRandomShadow())\r\n                elseif d6roll == 6 then\r\n                    atlasSlotBag.putObject(getRandomRelic())\r\n                    atlasSlotBag.putObject(getRandomRelic())\r\n                    atlasSlotBag.putObject(getRandomShadow())\r\n                end\r\n                -- Rename the slot bag and put it at the back of the Atlas Box\r\n                atlasSlotBag.setName(fullAtlasSlotBagName)\r\n                atlasBox.putObject(atlasSlotBag)\r\n            end\r\n            dealStartingSites()\r\n            \r\n            -- Clean up the setup button, mark setup as done and spawn the new buttons\r\n            removeButtonByLabel(self, setupButtonLabel)\r\n            self.addTag(chronicleCreatedTag)\r\n            destroyObject(siteBag)\r\n            for _,_ in ipairs(edificeBag.getObjects()) do\r\n                edificeBag.takeObject({rotation = {x=0,y=180,z=0}})\r\n            end\r\n            destroyObject(edificeBag)\r\n            printToAll(\"SETUP COMPLETE. Don't forget to add Edifices back to the corresponding suit decks before setting up the World Deck\\n\")\r\n            spawnAtlasButtons()\r\n            -- Lock the Atlas Box if it was locked before\r\n            if not wasUnlocked then atlasBox.removeTag(unlockedTag) end\r\n        end\r\n    end\r\nend\r\n\r\nfunction spawnRelics()\r\n    local relicCount = 0    \r\n    local wasUnlocked = atlasBox.hasTag(unlockedTag)\r\n    atlasBox.addTag(unlockedTag)\r\n    for i = 1, 20 do\r\n        atlasSlotBag = atlasBox.takeObject({index = 0})\r\n        if relicCount < 10 and #atlasSlotBag.getObjects() > 1 then\r\n            for _, item in ipairs(atlasSlotBag.getObjects()) do\r\n                item = atlasSlotBag.takeObject({guid = item.guid})\r\n                if relicCount < 10 and item.hasTag(relicTag) then\r\n                    relicBag.putObject(item)\r\n                    relicCount = relicCount + 1\r\n                else \r\n                    atlasSlotBag.putObject(item)\r\n                end\r\n            end\r\n        end\r\n        atlasBox.putObject(atlasSlotBag)\r\n    end\r\n    atlasBox.addTag(wasUnlocked)\r\n    printToAll(\"Retrieved \" .. relicCount .. \" relics from the AtlasBox\")\r\nend\r\n\r\n\r\nfunction dealStartingSites()\r\n    for i = 1,8 do\r\n        local relicNumber = 0;\r\n        local denizenNumber = 0;\r\n        local atlasSlotBag = atlasBox.takeObject({index = 0})\r\n        for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n            if dataTableContains(obj.tags, relicTag) then\r\n                atlasSlotBag.takeObject({\r\n                    guid = obj.guid,\r\n                    position = getRelicPosition(getSitePosition(i), relicNumber),\r\n                    rotation = {x=180, y=0, z=0},\r\n                })\r\n                relicNumber = relicNumber+1\r\n            end\r\n            if dataTableContains(obj.tags, edificeTag) or dataTableContains(obj.tags, shadowTag) then\r\n                if dataTableContains(obj.tags, shadowTag) then\r\n                    if getObjectFromGUID(curseDeckGUID) then\r\n                        getObjectFromGUID(curseDeckGUID).takeObject({\r\n                            position = vectorSum(getDenizenPosition(getSitePosition(i), denizenNumber), {x=0, y=0, z=0.55}),\r\n                            rotation = {x=180, y=math.random(0,1)*180, z=0},\r\n                        })\r\n                    else\r\n                        printToAll(\"Cannot find curse deck. Please place curses under shadow denizens\")\r\n                    end\r\n                end\r\n                atlasSlotBag.takeObject({\r\n                    guid = obj.guid, \r\n                    position = vectorSum(\r\n                        getDenizenPosition(getSitePosition(i), denizenNumber),\r\n                        (dataTableContains(obj.tags, shadowTag) and {x=0, y=0, z=-.9} or {x=0,y=0,z=0})),\r\n                    rotation = dataTableContains(obj.tags, shadowTag) and {x=0, y=180, z=0} or {x=180, y=0, z=0},\r\n                })\r\n                denizenNumber = denizenNumber+1\r\n            end\r\n        end\r\n        -- Deal Sites after since they go on top\r\n        for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n            if dataTableContains(obj.tags, \"Site\") then\r\n                atlasSlotBag.takeObject({\r\n                    guid = obj.guid,\r\n                    position = getSitePosition(i),\r\n                    rotation = {x=0, y=180, z=0},\r\n                })\r\n                break\r\n            end\r\n        end\r\n        -- Rename the bag to mark as empty\r\n        atlasSlotBag.setName(emptyAtlasSlotBagName)\r\n        atlasBox.putObject(atlasSlotBag)\r\n    end\r\nend\r\n\r\n-- Spawn Positions\r\nfunction getSitePosition(i)\r\n    siteOneXPos, siteYPos, siteOneZPos = 6.75, 2, 6\r\n    xDelta, zDelta = 20.45, -5.75\r\n    sitePositions = {\r\n        {x = siteOneXPos, y = siteYPos, z = siteOneZPos},\r\n        {x = siteOneXPos, y = siteYPos, z = siteOneZPos + zDelta},\r\n        {x = siteOneXPos + xDelta, y = siteYPos, z = siteOneZPos},\r\n        {x = siteOneXPos + xDelta, y = siteYPos, z = siteOneZPos + zDelta},\r\n        {x = siteOneXPos + xDelta, y = siteYPos, z = siteOneZPos + zDelta*2},\r\n        {x = siteOneXPos + xDelta*2+.5, y = siteYPos, z = siteOneZPos},\r\n        {x = siteOneXPos + xDelta*2+.5, y = siteYPos, z = siteOneZPos + zDelta},\r\n        {x = siteOneXPos + xDelta*2+.5, y = siteYPos, z = siteOneZPos + zDelta*2},\r\n    }\r\n    return sitePositions[i]\r\nend\r\n\r\n-- Add relic position offset based on which number relic it is\r\nfunction getRelicPosition(position, relicNumber)\r\n    relicVector = {x = 0, y = -0.5, z = -1.3}\r\n    subsequentRelicPos = {x = 1.15*relicNumber, y = 0.25*relicNumber, z = 0}\r\n    return vectorSum(position, vectorSum(relicVector, subsequentRelicPos))\r\nend\r\n\r\n-- Add denizen position offset based on which number relic it is\r\nfunction getDenizenPosition(position, denizenNumber)\r\n    denizenVector = {x = 5.5, y = -0.25, z = 0.25}\r\n    subsequentDenizenPos = {x = 3.5*denizenNumber, y = 0, z = 0}\r\n    return vectorSum(position, vectorSum(denizenVector, subsequentDenizenPos))\r\nend\r\n\r\n-- Get Elements for creating Chronicle\r\n\r\n\r\nfunction getRandomShadow()\r\n    return getRandomObjectFromContainer(shadowBag, false)\r\nend\r\n\r\n-- tag all relics\r\nfunction getRandomRelic()\r\n    return getRandomObjectFromContainer(relicBag, false)\r\nend\r\n\r\nfunction getRandomSite()\r\n    local site = getRandomObjectFromContainer(siteBag, false)\r\n    site.setColorTint(Color(0,0,0))\r\n    -- site.setColorTint(Color(1,1,1))\r\n    site.setRotation({x=0,y=180,z=0})\r\n    site.addTag(\"Site\")\r\n    return site\r\nend\r\n\r\nfunction getRandomEdifice()\r\n    return getRandomObjectFromContainer(edificeBag, true)\r\nend\r\n\r\nfunction tagAllItems()\r\n    bagTags = { \r\n        {bag = relicBag,    tag = relicTag},\r\n        {bag = edificeBag,  tag = edificeTag},\r\n        {bag = shadowBag,   tag = shadowTag} }\r\n    for _, bagTag in ipairs(bagTags) do\r\n        bag = bagTag.bag\r\n        tag = bagTag.tag\r\n        for _, item in ipairs(bag.getObjects()) do\r\n            item = bag.takeObject({guid = item.guid})\r\n            if item.type == \"Deck\" then\r\n                deck = item\r\n                local deckSize = #item.getObjects()\r\n                local lastCard = nil\r\n                for index, containedObject in ipairs(item.getObjects()) do\r\n                    if index < deckSize then\r\n                        containedObject = deck.takeObject({guid = containedObject.guid})\r\n                        containedObject.addTag(tag)\r\n                        lastCard = deck.remainder\r\n                        bag.putObject(containedObject)\r\n                    else\r\n                        lastCard.addTag(tag)\r\n                        bag.putObject(lastCard)\r\n                    end\r\n                end\r\n            else\r\n                item.addTag(tag)\r\n                bag.putObject(item)\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n\r\n--\r\n-- ATLAS BOX STORAGE\r\n-- \r\n\r\nfunction storeInit()\r\n    if checkForAtlasObjects() then\r\n        createStoringZone()\r\n    end\r\nend\r\n\r\nfunction createStoringZone()\r\n    createPortalZone(store)\r\nend\r\n\r\nfunction createPortalZone(callback)\r\n    cardSize = self.getVisualBoundsNormalized()[\"size\"]\r\n    spawnObject({\r\n        type = \"FogOfWarTrigger\",\r\n        -- position = {0,-10,0},\r\n        position = vectorSum(self.getPosition(), {x = 0, y = 100, z = 0}),\r\n        scale = {cardSize[\"x\"], 200, cardSize[\"z\"]},\r\n        sound = false,\r\n        callback_function = function(spawned_object)\r\n            -- spawned_object.setPosition(self.getPosition())\r\n            spawned_object.setColorTint(hexToColor(\"#ff00ff\"))\r\n            -- Wait.time(function() store(spawned_object) end, 0.10)\r\n            Wait.time(function()\r\n                callback(spawned_object)\r\n                destroyObject(spawned_object)\r\n            end, 0.10)\r\n            \r\n        end\r\n    })\r\nend\r\n\r\nfunction store(zone)\r\n    -- First time we validate the objects and check with the user\r\n    if #portalSites == 0 and #portalRelics == 0 and #portalEdifices == 0 and #portalShadow == 0 then\r\n        for _, obj in ipairs(zone.getObjects(true)) do\r\n            if obj.hasTag(siteTag) then table.insert(portalSites, obj) end\r\n            if obj.hasTag(relicTag) then table.insert(portalRelics, obj) end\r\n            if obj.hasTag(edificeTag) then table.insert(portalEdifices, obj) end\r\n            if obj.hasTag(shadowTag) then table.insert(portalShadow, obj) end\r\n        end\r\n        messageParts = {}\r\n        if #portalSites > 0 then table.insert(messageParts, #portalSites .. \" Site\") end\r\n        if #portalRelics > 0 then table.insert(messageParts, #portalRelics .. \" Relic(s)\") end    \r\n        if #portalEdifices > 0 then table.insert(messageParts, #portalEdifices .. \" Edifice\") end\r\n        if #portalShadow > 0 then table.insert(messageParts, #portalShadow .. \" Shadow\") end\r\n        if #messageParts > 0 then\r\n            printToAll(\"Detected \" .. table.concat(messageParts, \", \") .. \" on the Atlas Portal.\")\r\n            if #portalSites < 1 then\r\n                printToAll(\"ERROR: Missing a Site. Try again after placing a Site on the Atlas Portal.\\n\")\r\n                emptyStoredPortalObjs()\r\n                return\r\n            end\r\n            if #portalSites > 1 then\r\n                printToAll(\"ERROR: Too many Sites. Try again after removing Sites from the Atlas Portal until there is only one.\\n\")\r\n                emptyStoredPortalObjs()\r\n                return\r\n            end\r\n            if #portalRelics > 3 then\r\n                printToAll(\"ERROR: More than 3 Relics. Try again after removing some Relics from the Atlas Portal.\\n\")\r\n                emptyStoredPortalObjs()\r\n                return\r\n            end\r\n            if #portalEdifices > 1 then\r\n                printToAll(\"More than 1 Edifice. This is not typical but may be an exceptionalcase with current rules.\")\r\n            end\r\n            if #portalShadow > 1 then\r\n                printToAll(\"More than 1 Shadow. This is not typical but may be an exceptional case with current rules.\")\r\n            end\r\n            refreshStoreButton()\r\n            printToAll(\"Click the send button again to confirm.\\n\")\r\n            return\r\n        else\r\n            printToAll(\"No objects on the Atlas Portal to send.\\n\")\r\n            return\r\n        end\r\n    -- Subsequent times we actually store the objects into the atlasbox\r\n    else\r\n        -- check for all objects matching\r\n        local perfectMatch = true\r\n        local itemCount = #portalSites + #portalRelics + #portalEdifices + #portalShadow\r\n        for _, obj in ipairs(zone.getObjects(true)) do\r\n            if obj.hasTag(siteTag) then\r\n                perfectMatch = dataTableContains(portalSites, obj)\r\n                itemCount = itemCount - 1 \r\n            end\r\n            if obj.hasTag(relicTag) then\r\n                perfectMatch = dataTableContains(portalRelics, obj)\r\n                itemCount = itemCount - 1 \r\n            end\r\n            if obj.hasTag(edificeTag) then\r\n                perfectMatch = dataTableContains(portalEdifices, obj)\r\n                itemCount = itemCount - 1 \r\n            end\r\n            if obj.hasTag(shadowTag) then\r\n                perfectMatch = dataTableContains(portalShadow, obj)\r\n                itemCount = itemCount - 1 \r\n            end\r\n            if not perfectMatch then break end\r\n        end\r\n        if itemCount > 0 or not perfectMatch then \r\n            printToAll(\"ERROR: Objects on the Atlas Portal have changed since the last button press. Aborting storage.\\n\")\r\n            emptyStoredPortalObjs()\r\n            return\r\n        end\r\n\r\n        local foundEmptyBag = false\r\n        local wasUnlocked = atlasBox.hasTag(unlockedTag)\r\n        atlasBox.addTag(unlockedTag)\r\n        for i = 1, 20 do\r\n            atlasSlotBag = atlasBox.takeObject({index = 0})\r\n            if not foundEmptyBag and #atlasSlotBag.getObjects() == 0 then\r\n                foundEmptyBag = true\r\n                for _, obj in ipairs(portalSites) do\r\n                    obj.setColorTint(Color(0,0,0))\r\n                    atlasSlotBag.putObject(obj)\r\n                end\r\n                for _, obj in ipairs(portalRelics) do atlasSlotBag.putObject(obj) end\r\n                for _, obj in ipairs(portalEdifices) do atlasSlotBag.putObject(obj) end\r\n                for _, obj in ipairs(portalShadow) do atlasSlotBag.putObject(obj) end\r\n                atlasSlotBag.setName(fullAtlasSlotBagName)\r\n                printToAll(\"Stored objects in Slot number \" .. i .. \"\\n\")\r\n            end\r\n            atlasBox.putObject(atlasSlotBag)\r\n        end\r\n        if not wasUnlocked then atlasBox.removeTag(unlockedTag) end\r\n        emptyStoredPortalObjs()\r\n    end\r\nend\r\n\r\nfunction emptyStoredPortalObjs()\r\n    portalSites = {}\r\n    portalRelics = {}\r\n    portalEdifices = {}\r\n    portalShadow = {}\r\n    refreshStoreButton()\r\nend\r\n\r\n--\r\n-- ATLAS BOX RETRIEVAL\r\n-- \r\n\r\nfunction retrieveInit()\r\n    if checkForAtlasObjects() then\r\n        checkRetrievalZone()\r\n    end\r\nend\r\n\r\nfunction checkRetrievalZone()\r\n    createPortalZone(retrieve)\r\nend\r\n\r\nfunction retrieve(zone)\r\n    if #portalSites + #portalEdifices + #portalRelics + #portalShadow > 0 then\r\n        printToAll(\"ERROR: Cannot Summon while storing sites\\n\")\r\n        return\r\n    end\r\n    for _, obj in ipairs(zone.getObjects(true)) do\r\n        if obj.hasTag(siteTag) or obj.hasTag(relicTag) or obj.hasTag(edificeTag) or obj.hasTag(shadowTag) then\r\n            printToAll(\"ERROR: Cannot Summon while pieces are on the Portal\\n\")\r\n            return\r\n        end\r\n    end\r\n    self.setLock(true)\r\n\r\n    local d6roll = math.random(1,6)\r\n    -- local heldBag = nil\r\n    local spawnPosition = vectorSum(self.getPosition(), {x = 0, y = 5, z= 0})\r\n    relicNumber, denizenNumber, edificeCount, shadowCount = 0, 0, 0, 0\r\n    local wasUnlocked = atlasBox.hasTag(unlockedTag)\r\n    atlasBox.addTag(unlockedTag)\r\n    -- for i, obj in ipairs(atlasBox.getObjects()) do\r\n    local atlasSlotBag = atlasBox.takeObject({index = d6roll-1})\r\n    -- if i == d6roll then\r\n    -- heldBag = atlasSlotBag\r\n    for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n        if dataTableContains(obj.tags, relicTag) then\r\n            atlasSlotBag.takeObject({\r\n                guid = obj.guid,\r\n                position = getRelicPosition(spawnPosition, relicNumber),\r\n                rotation = {x=180, y=0, z=0},\r\n            })\r\n            relicNumber = relicNumber+1\r\n        end\r\n        if dataTableContains(obj.tags, shadowTag) then\r\n            atlasSlotBag.takeObject({\r\n                guid = obj.guid, \r\n                position = getDenizenPosition(spawnPosition, denizenNumber),\r\n                rotation = {x=180, y=0, z=0},\r\n            })\r\n            denizenNumber = denizenNumber+1\r\n            shadowCount = shadowCount+1\r\n        end\r\n        if dataTableContains(obj.tags, edificeTag) then\r\n            atlasSlotBag.takeObject({\r\n                guid = obj.guid, \r\n                position = getDenizenPosition(spawnPosition, denizenNumber),\r\n                rotation = {x=180, y=0, z=0},\r\n            })\r\n            denizenNumber = denizenNumber+1\r\n            edificeCount = edificeCount+1\r\n        end\r\n    end\r\n    for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n        if dataTableContains(obj.tags, siteTag) then\r\n            atlasSlotBag.takeObject({\r\n                guid = obj.guid,\r\n                position = spawnPosition,\r\n                rotation = {x=0, y=180, z=0},\r\n            })\r\n        end\r\n    end\r\n    atlasSlotBag.setName(emptyAtlasSlotBagName)\r\n-- else\r\n    atlasBox.putObject(atlasSlotBag)\r\n        -- end\r\n    -- end\r\n    messageParts = {}\r\n    if relicNumber > 0 then table.insert(messageParts, relicNumber .. \" Relic(s)\") end    \r\n    if edificeCount > 0 then table.insert(messageParts, edificeCount .. \" Edifice\") end\r\n    if shadowCount > 0 then table.insert(messageParts, shadowCount .. \" Shadow\") end\r\n    if #messageParts > 0 then\r\n        printToAll(\"Summoning Site from Slot \" .. d6roll .. \" with \" .. table.concat(messageParts, \", \") .. \"\\n\")\r\n    else\r\n        printToAll(\"Summoning Empty Site from Slot \" .. d6roll .. \"\\n\")\r\n\r\n    end\r\n    -- atlasBox.putObject(heldBag)\r\n    if not wasUnlocked then atlasBox.removeTag(unlockedTag) end\r\n\r\n\r\n\r\nend\r\n\r\n-- Override Site Flip\r\nfunction onPlayerAction(player, action, targets)\r\n    if action == Player.Action.FlipOver and #targets == 1 and targets[1].hasTag(\"Site\") then\r\n        if targets[1].getColorTint() == Color(0,0,0) then\r\n            targets[1].setColorTint(Color(1,1,1))\r\n        else\r\n            targets[1].setColorTint(Color(0,0,0))\r\n        end\r\n        return false\r\n    end\r\n    return true\r\nend\r\n\r\n\r\n-- Util\r\n\r\nfunction hexToColor(hex)\r\n    -- Remove the \"#\" if it exists\r\n    hex = hex:gsub(\"#\", \"\")\r\n\r\n    -- Convert each pair of hex digits to decimal and then to float\r\n    local r = tonumber(hex:sub(1, 2), 16) / 255\r\n    local g = tonumber(hex:sub(3, 4), 16) / 255\r\n    local b = tonumber(hex:sub(5, 6), 16) / 255\r\n\r\n    -- Return the RGB values as floats\r\n    return Color(r, g, b)\r\nend\r\n\r\nfunction dataTableContains(table, x)\r\n    found = false\r\n    for _, obj in ipairs(table) do\r\n        if obj == x then found = true end\r\n    end\r\n    return found\r\nend\r\n\r\nfunction removeButtonByLabel(holder, label)\r\n    local buttonIndex = nil\r\n    if holder.getButtons() then\r\n        for i, button in ipairs(holder.getButtons()) do\r\n            if button and button.label == label then\r\n                buttonIndex = button.index\r\n                break\r\n            end\r\n        end\r\n        if buttonIndex then holder.removeButton(buttonIndex) end\r\n    end\r\nend\r\n\r\nfunction getButtonByLabel(holder, label)\r\n    local buttonIndex = nil\r\n    for i,button in ipairs(holder.getButtons()) do\r\n        if button.label == label then\r\n            return button\r\n        end\r\n    end\r\nend\r\n\r\nfunction getRandomObjectFromContainer(container, flipped)\r\n    return container.takeObject({\r\n        guid = container.getObjects()[math.random(1, #container.getObjects())].guid,\r\n        position = vectorSum(container.getPosition(), {x = 0, y = 5, z = 0}),\r\n        rotation = flipped and vectorSum({x = 180, y = 180, z = 0},container.getRotation()) or container.getRotation(),\r\n    })\r\nend\r\n\r\nfunction vectorSum(v1, v2)\r\n    return {\r\n        x = v1.x + v2.x,\r\n        y = v1.y + v2.y,\r\n        z = v1.z + v2.z\r\n    }\r\nend\nend)\nreturn __bundle_require(\"Atlas Portal.804c02.lua\")",
      "LuaScriptState": "",
      "XmlUI": ""
    }
  ]
}