{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "804c02",
      "Name": "CardCustom",
      "Transform": {
        "posX": -34.1557961,
        "posY": 1.49510384,
        "posZ": 31.5237942,
        "rotX": 1.45863339E-08,
        "rotY": 180.0,
        "rotZ": -6.257065E-08,
        "scaleX": 2.23922753,
        "scaleY": 1.0,
        "scaleZ": 2.23922753
      },
      "Nickname": "Atlas Portal",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 37800,
      "SidewaysCard": false,
      "CustomDeck": {
        "378": {
          "FaceURL": "https://steamusercontent-a.akamaihd.net/ugc/28817056373477104/5955543B2DD38023F3777C38A4FD37C498C5879F/",
          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/28808007230930215/1853BB8F4493C3EC048FB824572B465246BCDD2F/",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "-- Bundled by luabundle {\"rootModuleName\":\"Atlas Portal.804c02.lua\",\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"Atlas Portal.804c02.lua\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"src/AtlasPortal\")\nend)\n__bundle_register(\"src/AtlasPortal\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- Atlas Box scripts written by harsch and Frack.  Last update:  04-10-2025\r\n\r\nrequire(\"src/Utils/ColorUtils\")\r\nrequire(\"src/Config/GeneralConfig\")\r\nrequire(\"src/Config/AtlasPortalButtons\")\r\nrequire(\"src/Utils/HelperFunctions\")\r\n\r\n-- Objects for needed game objects.\r\nlocal objects = {\r\n    atlasBox = nil,\r\n    relicBag = nil,\r\n    siteBag = nil,\r\n    table = nil,\r\n    map = nil,\r\n}\r\n\r\nlocal SITE_PREVIEW = \"SITE PREVIEW\"\r\n\r\nlocal mapTransform = nil\r\nlocal sitePreview = {}\r\nlocal portalPosition = self.getPosition()\r\nlocal retrieveInCooldown = false\r\n\r\n-- ==============================\r\n-- INITIALIZATION\r\n-- ==============================\r\n\r\nfunction onLoad() \r\n    -- Create all needed tags by adding them to this object and then removing them\r\n    local tagsToAdd = {tags.site, tags.relic, tags.edifice, tags.unlocked, tags.protected, tags.ancient, tags.card}\r\n    for _, tag in ipairs(tagsToAdd) do\r\n        self.addTag(tag)\r\n        self.removeTag(tag)\r\n    end\r\n    \r\n    if not (self.hasTag(tags.debug)) then\r\n        self.addTag(tags.debug)\r\n        self.removeTag(tags.debug)\r\n    end\r\n\r\n    local chronicleExists = self.hasTag(tags.chronicleCreated)\r\n    -- If the chronicle is already created we can skip setup\r\n    if chronicleExists and setupAtlasBox() then\r\n        setupObjects(true)\r\n        createButtons(buttons.retrieve, buttons.spawnRelics, buttons.retrieveBack, buttons.ruinSites, buttons.unifySites)\r\n        refreshRevisitPreview()\r\n        return\r\n    -- If the chronicle is not created we need to spawn setup buttons\r\n    elseif not chronicleExists then\r\n        if setupObjects(false) then\r\n            tagAllItems() -- Tag all items in the bags\r\n            self.createButton(buttons.setup)\r\n        else \r\n            self.createButton(buttons.retry)\r\n        end\r\n    end\r\nend\r\n\r\n-- Validate that setup objects can be found and set them\r\nfunction setupObjects(isChronicleCreated)\r\n    local loadTable = {\r\n        {objectName = \"table\", GUID = GUIDs.table, printableName = \"Table\"},\r\n        {objectName = \"atlasBox\", GUID = GUIDs.atlasBox, printableName = \"Atlas Box Bag\"},\r\n        {objectName = \"map\", GUID = GUIDs.map, printableName = \"Map\"}\r\n    }\r\n    local setupTable = {\r\n        {objectName = \"relicBag\", GUID = GUIDs.relicBag, printableName = \"Relic Bag\"},\r\n        {objectName = \"siteBag\", GUID = GUIDs.siteBag, printableName = \"Site Bag\"},\r\n    }\r\n    local foundAll = true\r\n    \r\n    for _, loadTable in ipairs(loadTable) do\r\n        objects[loadTable.objectName] = getObjectFromGUID(loadTable.GUID)\r\n        if objects[loadTable.objectName] == nil then\r\n            printToAll(\"ERROR: Cannot find \" .. loadTable.printableName .. \" by GUID\")\r\n            foundAll = false\r\n        end\r\n    end\r\n    if not isChronicleCreated then\r\n        for _, setupItem in ipairs(setupTable) do\r\n            objects[setupItem.objectName] = getObjectFromGUID(setupItem.GUID)\r\n            if objects[setupItem.objectName] == nil then\r\n                printToAll(\"ERROR: Cannot find \" .. setupItem.printableName .. \" by GUID\")\r\n                foundAll = false\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(getAllObjects()) do\r\n            if obj.getDescription() == SITE_PREVIEW then\r\n                table.insert(sitePreview, obj)\r\n            end\r\n            if obj.hasTag(tags.site) then\r\n                obj.addContextMenuItem(\"Preserve Site\", markCard)\r\n                obj.addContextMenuItem(\"Allow Site to Ruin\", unMarkCard)\r\n            end\r\n        end\r\n    end\r\n    mapTransform = {position = objects.map.getPosition(), rotation = objects.map.getRotation()}\r\n    return foundAll\r\nend\r\n\r\n-- Check that the Atlas Box can be found\r\n    function setupAtlasBox()\r\n    objects.atlasBox = getObjectFromGUID(GUIDs.atlasBox)\r\n    if objects.atlasBox == nil then\r\n        printToAll(\"ERROR: Cannot find Atlas Box Bag by GUID\")\r\n        self.createButton(buttons.retry)\r\n        return false\r\n    end\r\n    return true\r\nend\r\n\r\n-- Remove all buttons\r\nfunction retry()\r\n    removeButtons(buttons.retry)\r\n    onLoad()\r\nend\r\n\r\n-- Tag all items in bags\r\nfunction tagAllItems()\r\n    local bagTags = { \r\n        {bag = objects.relicBag,    tag = tags.relic},\r\n    }\r\n    for _, bagTag in ipairs(bagTags) do\r\n        local bag, tag = bagTag.bag, bagTag.tag\r\n        for _, item in ipairs(bag.getObjects()) do\r\n            bag.putObject(addTagAndReturn(bag.takeObject({guid = item.guid}), tag))\r\n        end\r\n    end\r\nend\r\n\r\n-- ==============================\r\n-- CHRONICLE SETUP\r\n-- ==============================\r\n\r\nfunction chronicleSetup(obj, color, alt_click)\r\n    function chronicleSetupCoroutine()\r\n        if not alt_click then\r\n            -- If items are missing we need to retry setup\r\n            if not setupObjects() then\r\n                removeButtons(buttons.setup)\r\n                self.createButton(buttons.retry)\r\n                return\r\n            end\r\n            -- Tag all cards\r\n            printToAll(\"organizing cards...\")\r\n            local decksDone = 0\r\n            for _, deck in pairs(getArchiveDecks()) do\r\n                function tagAllCardsInDeck(_deck)\r\n                    local deckSize = #deck.getObjects()\r\n                    for i = deckSize-1, 0, -1 do\r\n                        local card = deck.takeObject({index = i})\r\n                        for i = 0, 10 do\r\n                            coroutine.yield(0)\r\n                        end\r\n                        card.addTag(tags.card)\r\n                        for i = 0, 10 do\r\n                            coroutine.yield(0)\r\n                        end\r\n                        deck.putObject(card)\r\n                    end\r\n                    decksDone = decksDone+1;\r\n                    return 1\r\n                end\r\n                startLuaCoroutine(self, \"tagAllCardsInDeck\")\r\n            end\r\n            while decksDone < 6 do\r\n                coroutine.yield(0)\r\n            end\r\n            for _, deck in pairs(getArchiveDecks()) do\r\n                deck.setRotation({0,180,180})\r\n                deck.shuffle()\r\n            end\r\n            -- Take all sites and put them in the Atlas Box. Roll a d6 and add additional items depending on the roll\r\n            printToAll(\"creating the world...\")\r\n            local numSites = #objects.siteBag.getObjects()\r\n            for i = 0, #objects.atlasBox.getObjects()-1 do\r\n                local atlasSlotBag = getAtlasBag(0)\r\n                if i < numSites then\r\n                    atlasSlotBag.putObject(getRandomSite())\r\n                    coroutine.yield(0)\r\n                end\r\n                putAtlasBag(atlasSlotBag)\r\n                coroutine.yield(0)\r\n            end\r\n            -- Deal Starting Sites\r\n            for siteNumber = 1,8 do\r\n                local atlasSlotBag = getAtlasBag(0)\r\n                spawnAllFromBagAtTransform(atlasSlotBag, getTransformStruct(\"site\", siteNumber, mapTransform), true)\r\n                coroutine.yield(0)\r\n            end\r\n            destroyObject(objects.siteBag)\r\n\r\n            createRelicDeck()\r\n            destroyObject(objects.relicBag)\r\n            \r\n            generateNewWorldDeck()\r\n\r\n            -- Clean up the bags and add the chronicle created tag\r\n            self.addTag(tags.chronicleCreated)\r\n            removeButtons(buttons.setup)\r\n            createButtons(buttons.retrieve, buttons.spawnRelics, buttons.retrieveBack, buttons.ruinSites,  buttons.unifySites)\r\n            refreshRevisitPreview()\r\n            createDispossessed()\r\n            printToAll(\"WORLD DECK SETUP COMPLETE.\")\r\n            \r\n        end\r\n        return 1\r\n    end\r\n    startLuaCoroutine(self, \"chronicleSetupCoroutine\")\r\nend\r\n\r\nfunction generateNewWorldDeck() \r\n    local decks = getArchiveDecks()\r\n    local firstCard = nil\r\n    local worldDeck = nil\r\n    -- add 9 cards from each suit\r\n    for _, suit in ipairs(suits) do\r\n        local deck = decks[suit]\r\n        for i=1, 9 do\r\n            local newCard = deck.takeObject();\r\n            for i = 0, 10 do\r\n                coroutine.yield(0)\r\n            end\r\n            if firstCard == nil then\r\n                local deckPosition = getTransformStruct(\"worldDeck\", 0, mapTransform)\r\n                firstCard = newCard\r\n                firstCard.setPosition(deckPosition.position)\r\n                firstCard.setRotation(deckPosition.rotation)\r\n            elseif worldDeck == nil then\r\n                worldDeck = firstCard.putObject(newCard)\r\n                worldDeck.setName(\"World Deck\")\r\n            else\r\n                worldDeck.putObject(newCard)\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction createRelicDeck()\r\n    local firstRelic = nil\r\n    local relicDeck = nil\r\n    for _, item in ipairs(objects.relicBag.getObjects()) do\r\n        local relic = objects.relicBag.takeObject()\r\n        coroutine.yield(0)\r\n        local deckPosition = getTransformStruct(\"relicStack\", 0, mapTransform)\r\n        if firstRelic == nil then\r\n            firstRelic = relic\r\n            firstRelic.setPosition(deckPosition.position)\r\n            firstRelic.setRotation(deckPosition.rotation)\r\n        elseif relicDeck == nil then\r\n            relicDeck = firstRelic.putObject(relic)\r\n            relicDeck.setName(\"Relic Deck\")\r\n        else\r\n            relicDeck.putObject(relic)\r\n        end\r\n        coroutine.yield(0)\r\n    end\r\nend\r\n\r\nfunction createDispossessed() \r\n    local decks = getArchiveDecks()\r\n    local firstCard = nil\r\n    local dispossessed = nil\r\n    -- add 2 cards from each suit\r\n    for _, suit in ipairs(suits) do\r\n        local deck = decks[suit]\r\n        for i=1, 2 do\r\n            local newCard = deck.takeObject();\r\n            coroutine.yield(0)\r\n            if firstCard == nil then\r\n                local deckPosition = getTransformStruct(\"dispossessed\", 0, mapTransform)\r\n                firstCard = newCard\r\n                firstCard.setPosition(deckPosition.position)\r\n                firstCard.setRotation(deckPosition.rotation)\r\n            elseif dispossessed == nil then\r\n                dispossessed = firstCard.putObject(newCard)\r\n                dispossessed.setName(\"Dispossessed\")\r\n            else\r\n                dispossessed.putObject(newCard)\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n-- Get Elements for creating Chronicle\r\nfunction getRandomSite()\r\n    local site = getRandomObjectFromContainer(objects.siteBag, false)\r\n    addTagAndReturn(site, tags.site).setRotation({x=0,y=180,z=0})\r\n    return site\r\nend\r\n\r\n\r\n-- ==============================\r\n-- ATLAS BOX STORAGE\r\n-- ==============================\r\n\r\nfunction ruinSites()\r\n    local toStore = {};\r\n    local completedSites = 0\r\n    local storedSites = 0\r\n    function quickStoreCoroutine()\r\n        prettyPrintTable(toStore)\r\n        local i = #toStore\r\n        -- Store the objects in the Atlas Box in the empty slot closest to the front\r\n        local foundEmptyBag = false\r\n        for j = 1, #objects.atlasBox.getObjects() do\r\n            local atlasSlotBag = getAtlasBag(0)\r\n            if i > 0 and #atlasSlotBag.getObjects() == 0 then\r\n                for _, obj in ipairs(toStore[i]) do\r\n                    atlasSlotBag.putObject(obj)\r\n                    storedSites = storedSites + 1\r\n                    for k = 0, 10 do\r\n                        coroutine.yield(0)\r\n                    end\r\n                end\r\n                i = i - 1\r\n                if isDebug() then\r\n                    printToAll(\"Storing objects in bag \" .. j)\r\n                end\r\n            elseif isDebug() then\r\n                printToAll(\"Skipping bag \" .. j .. \" because full\")\r\n            end\r\n            putAtlasBag(atlasSlotBag)\r\n        end\r\n        refreshRevisitPreview()\r\n        unifySites()\r\n        return 1\r\n    end\r\n    function getRuinableObjectsAtSite(hitObjects, index)\r\n        printToAll(index)\r\n        local isProtected = false\r\n        local isAncient = false\r\n        local protectedSite\r\n\r\n        for _, obj in ipairs(hitObjects) do\r\n            if obj.hasTag(tags.site) then\r\n                obj.setLock(false)\r\n                isProtected = obj.hasTag(tags.protected)\r\n                unMarkCard(_,_,obj)\r\n                if obj.hasTag(tags.ancient) then\r\n                    isAncient = true\r\n                end\r\n            end\r\n        end\r\n        if not isProtected then\r\n            local toStoreSlot = {}\r\n            for _, obj in ipairs(hitObjects) do\r\n                if (obj.hasTag(tags.site) or obj.hasTag(tags.relic) or obj.hasTag(tags.edifice)) then\r\n                    table.insert(toStoreSlot, obj)\r\n                elseif (obj.hasTag(tags.card) and isAncient) then\r\n                    table.insert(toStoreSlot, obj)\r\n                elseif not (obj.getGUID() == GUIDs.map) and\r\n                       not (obj.getGUID() == GUIDs.table) and\r\n                       not (obj.getGUID() == GUIDs.scriptingTrigger) and\r\n                       not (obj.memo == \"trigger\") then\r\n                    local randomOffset = {\r\n                        x = (math.random() - 0.5) * 15,\r\n                        y = (math.random() - 0.5) * 20,\r\n                        z = (math.random() - 0.5) * 10\r\n                    }\r\n                    obj.setPositionSmooth(vectorSum(vector(73, 10, -5),randomOffset), false, false)\r\n                end\r\n            end\r\n            if #toStoreSlot > 0 then\r\n                table.insert(toStore, 1, toStoreSlot)\r\n            end\r\n        end\r\n        completedSites = completedSites + 1\r\n\r\n        local waitCount = 0\r\n        if index == 1 then\r\n            while completedSites < 8 do\r\n                printToAll(\"Waiting for \" .. waitCount)\r\n                waitCount = waitCount + 1\r\n            end\r\n            startLuaCoroutine(self, \"quickStoreCoroutine\")\r\n        end\r\n    end\r\n    getObjectsAtSites(getRuinableObjectsAtSite, false)\r\nend\r\n\r\nfunction unifySites()\r\n    local emptySites = {}\r\n    local currentSlot = 1\r\n    function unifySitesCallback(hitObjects, slot)\r\n        function unifySitesCallbackCoroutine()\r\n            local waitCount = 0\r\n            while not (slot == currentSlot) do\r\n                coroutine.yield(0)\r\n                if isDebug() and waitCount%20 == 0 then printToAll(\"Waiting for \" .. waitCount/20 .. \", \" .. currentSlot .. \" \" .. slot) end\r\n                waitCount = waitCount + 1\r\n            end\r\n            local isEmpty = true\r\n            for _, obj in ipairs(hitObjects) do\r\n                if not (obj.getGUID() == GUIDs.map) and\r\n                not (obj.getGUID() == GUIDs.table) and\r\n                not (obj.getGUID() == GUIDs.scriptingTrigger) and\r\n                not (obj.memo == \"trigger\")  then\r\n                    if obj.hasTag(tags.site) then\r\n                        obj.setLock(true)\r\n                        isEmpty = false\r\n                    end\r\n                end\r\n            end\r\n            if isEmpty then\r\n                table.insert(emptySites, slot)\r\n            elseif #emptySites > 0 then\r\n                local destinationSlot = table.remove(emptySites, 1)\r\n                local deltaPosition = vectorSum(\r\n                    {\r\n                        x = getTransformStruct(\"site\", slot, mapTransform).position.x*-1,\r\n                        y = getTransformStruct(\"site\", slot, mapTransform).position.y*-1,\r\n                        z = getTransformStruct(\"site\", slot, mapTransform).position.z*-1,\r\n                    },\r\n                    getTransformStruct(\"site\", destinationSlot, mapTransform).position\r\n                )\r\n                for _, obj in ipairs(hitObjects) do\r\n                    if not (obj.getGUID() == GUIDs.map) and not (obj.getGUID() == GUIDs.table) and not (obj.getGUID() == GUIDs.scriptingTrigger) then\r\n                        obj.setPositionSmooth(vectorSum(obj.getPosition(), deltaPosition), false, true)\r\n                    end\r\n                end\r\n                for i = 0, 200 do\r\n                    coroutine.yield(0)\r\n                end\r\n                table.insert(emptySites, slot)\r\n            end\r\n            currentSlot = slot+1\r\n            return 1\r\n        end\r\n        startLuaCoroutine(self, \"unifySitesCallbackCoroutine\")\r\n    end\r\n    getObjectsAtSites(unifySitesCallback, true)    \r\nend\r\n\r\n-- ==============================\r\n-- ATLAS BOX RETRIEVAL\r\n-- ==============================\r\n\r\nfunction retrieve(owner, color, fromBack)\r\n    local hasRetrieved = false\r\n    function retrieveAtFirstEmptySlot(foundObjects, slotNumber)\r\n        if not hasRetrieved then\r\n            for _, obj in ipairs(foundObjects) do\r\n                if obj.hasTag(tags.site) then\r\n                    if slotNumber == 8 then\r\n                        printToAll(\"No room to summon sites\")\r\n                    end\r\n                    return\r\n                end\r\n            end\r\n            hasRetrieved = true\r\n            local countsAndTags = {\r\n                {tag = tags.relic, data = {count = 0, printName = \"Relic(s)\"}},\r\n                {tag = tags.edifice, data = {count = 0, printName = \"Edifice(s)\"}},\r\n                {tag = tags.card, data = {count = 0, printName = \"Card(s)\"}},\r\n            }\r\n            local bagIndex = 0\r\n            if fromBack then\r\n            -- Get the backmost full bag otherwise we use front\r\n                local lastFullBagIndex = 0\r\n                for i = 0, #objects.atlasBox.getObjects()-1 do\r\n                    local atlasSlotBag = getAtlasBag(0)\r\n                    if #atlasSlotBag.getObjects() > 0 then\r\n                        lastFullBagIndex = i\r\n                    end\r\n                    putAtlasBag(atlasSlotBag)\r\n                end\r\n                bagIndex = lastFullBagIndex\r\n            end\r\n            -- Spawn the bags contents\r\n            local atlasSlotBag = getAtlasBag(bagIndex)\r\n            for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n                for _, countAndTag in ipairs(countsAndTags) do\r\n                    if dataTableContains(obj.tags, countAndTag.tag) then\r\n                        countAndTag.data.count = countAndTag.data.count + 1\r\n                    end\r\n                end\r\n            end\r\n            spawnAllFromBagAtTransform(atlasSlotBag, getTransformStruct(\"site\", slotNumber, mapTransform), false)\r\n            \r\n            -- Print message with what was summoned\r\n            local messageParts = {}\r\n            for _, countAndTag in ipairs(countsAndTags) do\r\n                if countAndTag.data.count > 0 then\r\n                    table.insert(messageParts, countAndTag.data.count .. \" \" .. countAndTag.data.printName)\r\n                end\r\n            end\r\n            if isDebug() then\r\n                printToAll(#messageParts > 0 and (\"Summoning Site with \" .. table.concat(messageParts, \", \")) or (\"Summoning Empty Site\"))\r\n            end\r\n            if fromBack then refreshRevisitPreview() end\r\n            return\r\n        end\r\n    end\r\n    if retrieveInCooldown then\r\n        printToAll(\"Wait a sec...\")\r\n    end\r\n    if setupAtlasBox() and not retrieveInCooldown then\r\n        retrieveInCooldown = true\r\n        getObjectsAtSites(retrieveAtFirstEmptySlot, true)\r\n        Wait.time(function()\r\n            retrieveInCooldown = false\r\n        end, 0.5)\r\n    end\r\nend\r\n\r\nfunction retrieveBack(owner, color)\r\n    retrieve(owner, color, true)\r\nend\r\n\r\nfunction refreshRevisitPreview()\r\n    local portalPosition = self.getPosition()\r\n    function refreshRevisitPreviewCoroutine()\r\n        if sitePreview then \r\n            for _, obj in ipairs(sitePreview) do\r\n                destroyObject(obj)\r\n            end\r\n            sitePreview = {}\r\n        end\r\n        local previewPosition = vectorSum(portalPosition, vector(-8.75,0,-3))\r\n        local lastFullBagIndex = -1\r\n        for i = 0, #objects.atlasBox.getObjects()-1 do\r\n            local atlasSlotBag = getAtlasBag(0)\r\n            if #atlasSlotBag.getObjects() > 0 then\r\n                lastFullBagIndex = i\r\n            end\r\n            putAtlasBag(atlasSlotBag)\r\n        end\r\n        local firstBag = true\r\n        if lastFullBagIndex == -1 then\r\n            sitePreview = {}\r\n            return 1\r\n        end\r\n        local atlasSlotBag = getAtlasBag(lastFullBagIndex)\r\n        local denizenCount = 0\r\n        local totalDenizenCount = 0\r\n        for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n            if dataTableContains(obj.tags, tags.edifice) or dataTableContains(obj.tags, tags.relic) then\r\n                totalDenizenCount = totalDenizenCount + 1\r\n            end\r\n        end\r\n        for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n            if dataTableContains(obj.tags, tags.site) then\r\n                local site = atlasSlotBag.takeObject({guid = obj.guid})\r\n                coroutine.yield(0)\r\n                siteClone = site.clone({position = previewPosition})\r\n                siteClone.setRotation(vector(0,180,0))\r\n                siteClone.setScale(vector(1, 0.1, 1))\r\n                siteClone.setLock(true)\r\n                siteClone.setPosition(previewPosition)\r\n                siteClone.setDescription(SITE_PREVIEW)\r\n                table.insert(sitePreview, siteClone)\r\n                atlasSlotBag.putObject(site)\r\n            end\r\n            if dataTableContains(obj.tags, tags.edifice) then\r\n                local denizen = atlasSlotBag.takeObject({guid = obj.guid})\r\n                coroutine.yield(0)\r\n                denizenClone = denizen.clone({position = previewPosition})\r\n                denizenClone.setRotation(vector(0,180,0))\r\n                denizenClone.setScale(vector(0.5, 0.1, 0.5))\r\n                denizenClone.setLock(true)\r\n                denizenClone.setPosition(vectorSum(\r\n                    previewPosition,\r\n                    vector(2.65, .001*denizenCount, totalDenizenCount>1 and 0.6/(4-totalDenizenCount) - (0.6*denizenCount) or 0)\r\n                ))\r\n                denizenClone.setDescription(SITE_PREVIEW)\r\n                denizenCount = denizenCount + 1\r\n                table.insert(sitePreview, denizenClone)\r\n                atlasSlotBag.putObject(denizen)\r\n            end\r\n        end\r\n        \r\n        for _, obj in ipairs(atlasSlotBag.getObjects()) do\r\n            if dataTableContains(obj.tags, tags.relic) then\r\n                local relic = atlasSlotBag.takeObject({guid = obj.guid})\r\n                coroutine.yield(0)\r\n                relicClone = relic.clone({position = previewPosition})\r\n                relicClone.setRotation(vector(0,180,180))\r\n                relicClone.setScale(vector(0.275, 0.1, 0.275))\r\n                relicClone.setLock(true)\r\n                relicClone.setPosition(vectorSum(\r\n                    previewPosition,\r\n                    vector(2.65, .001*denizenCount, totalDenizenCount>1 and 0.6/(4-totalDenizenCount) - (0.6*denizenCount) or 0)\r\n                ))\r\n                relicClone.setDescription(SITE_PREVIEW)\r\n                denizenCount = denizenCount + 1\r\n                table.insert(sitePreview, relicClone)\r\n                atlasSlotBag.putObject(relic)\r\n            end\r\n        end\r\n        putAtlasBag(atlasSlotBag)\r\n        for i = lastFullBagIndex, #objects.atlasBox.getObjects()-2 do\r\n            local atlasSlotBag = getAtlasBag(lastFullBagIndex)\r\n            putAtlasBag(atlasSlotBag)\r\n        end\r\n        return 1\r\n    end\r\n    startLuaCoroutine(self, \"refreshRevisitPreviewCoroutine\")\r\nend\r\n\r\n\r\n--- ==============================\r\n--- ATLAS BOX RELIC RETRIEVAL\r\n--- ==============================\r\n\r\n-- Try to get 10 relics from the Atlas Box \r\nfunction spawnRelics()\r\n    local relicCount = 0    \r\n    for i = 1, #objects.atlasBox.getObjects() do\r\n        local atlasSlotBag = getAtlasBag(0)\r\n        if relicCount < 10 then\r\n            for _, item in ipairs(atlasSlotBag.getObjects()) do\r\n                if relicCount < 10 and dataTableContains(item.tags, tags.relic) then\r\n                    local transform = getTransformStruct(\"relicStack\", 0, mapTransform)\r\n                    atlasSlotBag.takeObject({\r\n                        guid = item.guid,\r\n                        position = transform.position,\r\n                        rotation = transform.rotation,\r\n                    })\r\n                    relicCount = relicCount + 1\r\n                end\r\n            end\r\n        end\r\n        putAtlasBag(atlasSlotBag)\r\n    end\r\n    printToAll(\"Retrieved \" .. relicCount .. \" relics from the Atlas Box\")\r\nend\r\n\r\n-- ==============================\r\n-- UTILITY\r\n-- ==============================\r\n\r\n-- Get Atlas Slot Bag from the Atlas Box and relock if needed\r\nfunction getAtlasBag(i)\r\n    local wasUnlocked = objects.atlasBox.hasTag(tags.unlocked)\r\n    objects.atlasBox.addTag(tags.unlocked)\r\n    local atlasSlotBag = objects.atlasBox.takeObject({\r\n        index = i,\r\n        position = vector(0,10,0)\r\n    })\r\n    if not wasUnlocked then objects.atlasBox.removeTag(tags.unlocked) end\r\n    return atlasSlotBag\r\nend\r\n\r\n-- Put Atlas Slot Bag into the Atlas Box and relock if needed\r\nfunction putAtlasBag(bag)\r\n    local wasUnlocked = objects.atlasBox.hasTag(tags.unlocked)\r\n    objects.atlasBox.addTag(tags.unlocked)\r\n    if #bag.getObjects() > 0 then\r\n        bag.setName(atlasSlotNames.full)\r\n        bag.setColorTint(hexToColor(\"#9999ff\"))\r\n    else\r\n        bag.setName(atlasSlotNames.empty)\r\n        bag.setColorTint(hexToColor(\"#ff9999\"))\r\n    end\r\n    objects.atlasBox.putObject(bag)\r\n    if not wasUnlocked then objects.atlasBox.removeTag(tags.unlocked) end\r\nend\r\n\r\n-- Spawn all objects from a bag at a given position and rotation\r\nfunction spawnAllFromBagAtTransform(bag, baseTransform, duringSetup) \r\n    function spawnAllFromBagAtTransformCoroutine() \r\n        local relicNumber, denizenNumber, denizenCount = 0, 0, 0;\r\n        local atlasObjects = bag.getObjects()\r\n        -- Take out sites, edifices and relics\r\n        for _, obj in ipairs(atlasObjects) do\r\n            coroutine.yield(0)\r\n            local transform = nil\r\n            if dataTableContains(obj.tags, tags.site) then\r\n                transform = baseTransform\r\n            elseif dataTableContains(obj.tags, tags.edifice) or dataTableContains(obj.tags, tags.card) then\r\n                transform = getTransformStruct(\"denizen\", denizenNumber, baseTransform)\r\n                denizenNumber = denizenNumber+1\r\n            end\r\n            if transform then\r\n                local bagObj = bag.takeObject({\r\n                    guid = obj.guid, \r\n                    rotation = transform.rotation,\r\n                    position = transform.position,\r\n                    callback_function = function(_obj)\r\n                        if _obj.hasTag(tags.site) and duringSetup then\r\n                            Wait.time(function ()\r\n                                _obj.setLock(true)\r\n                            end, 1.5)\r\n                        end\r\n                    end\r\n                })\r\n                if bagObj.hasTag(tags.site) then\r\n                    bagObj.addContextMenuItem(\"Preserve Site\", markCard)\r\n                    bagObj.addContextMenuItem(\"Allow Site to Ruin\", unMarkCard)\r\n                end\r\n\r\n            end\r\n        end\r\n        for _, obj in ipairs(bag.getObjects()) do\r\n            coroutine.yield(0)\r\n            local transform = nil\r\n            if dataTableContains(obj.tags, tags.relic) then\r\n                transform = getTransformStruct(\"relic\", denizenNumber, baseTransform)\r\n                denizenNumber = denizenNumber+1\r\n            end\r\n            if transform then\r\n                local bagObj = bag.takeObject({\r\n                    guid = obj.guid, \r\n                    rotation = transform.rotation,\r\n                    position = transform.position,\r\n                    callback_function = function(_obj)\r\n                        if _obj.hasTag(tags.site) and duringSetup then\r\n                            Wait.time(function ()\r\n                                _obj.setLock(true)\r\n                            end, 1.5)\r\n                        end\r\n                    end\r\n                })\r\n                if bagObj.hasTag(tags.site) then\r\n                    bagObj.addContextMenuItem(\"Preserve Site\", markCard)\r\n                    bagObj.addContextMenuItem(\"Allow Site to Ruin\", unMarkCard)\r\n                end\r\n            end\r\n        end\r\n        putAtlasBag(bag)\r\n        return 1\r\n        end\r\n    startLuaCoroutine(self, \"spawnAllFromBagAtTransformCoroutine\")\r\n    return\r\nend\r\n\r\n\r\nfunction getObjectsAtSites(callback, forwards)\r\n    function getObjectAtSite(callback, index, endIndex, step)\r\n        local zone = spawnObject({\r\n            type = \"FogOfWarTrigger\",\r\n            position = vectorSum(getTransformStruct(\"site\", index, mapTransform).position, vector(5.65, 0, 0)),\r\n            scale = vector(19.5,2,5.4),\r\n            sound = false,\r\n            callback_function = function(createdZone)\r\n                createdZone.memo = \"trigger\"\r\n                Wait.time(function()\r\n                    local hitObjects = createdZone.getObjects(true);\r\n                    callback(hitObjects, index)\r\n                    if not (index == endIndex) then\r\n                        getObjectAtSite(callback, index + step, endIndex, step)\r\n                    end\r\n                    Wait.time(function ()\r\n                        destroyObject(createdZone)\r\n                    end, 0.2)\r\n                end, 0.1)\r\n            end\r\n        })\r\n    end\r\n\r\n    \r\n    local s, e, c = 1, 8, 1\r\n    if not forwards then\r\n        s, e, c = 8, 1, -1\r\n    end\r\n    getObjectAtSite(callback, s, e, c)    \r\nend\r\n\r\nfunction getArchiveDecks() \r\n    local decks = {} \r\n    for deckName, guid in pairs(GUIDs.archiveDecks) do\r\n        decks[deckName] = getObjectFromGUID(guid)\r\n    end\r\n    return decks\r\nend\r\n\r\nfunction markCard(_, _, obj)\r\n      obj.highlightOn(hexToColor(\"#ff00ff\"))\r\n      obj.addTag(tags.protected)\r\n  end\r\n  \r\nfunction unMarkCard(_, _, obj)\r\n    obj.highlightOff()\r\n    obj.removeTag(tags.protected)\r\nend\r\n\r\nfunction isDebug()\r\n    return self.hasTag(tags.debug)\r\nend\nend)\n__bundle_register(\"src/Utils/HelperFunctions\", function(require, _LOADED, __bundle_register, __bundle_modules)\nfunction dataTableContains(table, x)\r\n    for _, obj in ipairs(table) do\r\n        if obj == x then return true end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getRandomObjectFromContainer(container, flipped)\r\n    local objects = container.getObjects()\r\n    if #objects == 0 then return nil end  -- Prevent errors when bag is empty\r\n    local selected = objects[math.random(1, #objects)]\r\n\r\n    return container.takeObject({\r\n        guid = selected.guid,\r\n        position = vectorSum(container.getPosition(), {x = 0, y = 5, z = 0}),\r\n        rotation = flipped and vectorSum({x = 180, y = 180, z = 0},container.getRotation()) or container.getRotation(),\r\n    })\r\nend\r\n\r\nfunction vectorSum(v1, v2)\r\n    return {\r\n        x = v1.x + v2.x,\r\n        y = v1.y + v2.y,\r\n        z = v1.z + v2.z\r\n    }\r\nend\r\n\r\nfunction removeButtons(...)\r\n    local buttonsToRemove = {...}\r\n    for _, buttonToRemove in ipairs(buttonsToRemove) do\r\n        local buttonIndex = nil\r\n        if self.getButtons() then\r\n            for i, button in ipairs(self.getButtons()) do\r\n                if button and button.label == buttonToRemove.label then\r\n                    buttonIndex = button.index\r\n                    break\r\n                end\r\n            end\r\n            if buttonIndex then self.removeButton(buttonIndex) end\r\n        end\r\n    end\r\nend\r\n\r\nfunction createButtons(...)\r\n    local buttonsToCreate = {...}\r\n    for _, buttonToCreate in ipairs(buttonsToCreate) do\r\n        self.createButton(buttonToCreate)\r\n    end\r\nend\r\n\r\nfunction addTagAndReturn(item, tag)\r\n    item.addTag(tag)\r\n    return item\r\nend\r\n\r\nfunction prettyPrintTable(obj, indent)\r\n    indent = indent or 0\r\n    local formatting = string.rep(\"  \", indent)\r\n\r\n    if type(obj) ~= \"table\" then\r\n        print(formatting .. tostring(obj))\r\n        return\r\n    end\r\n\r\n    print(formatting .. \"{\")\r\n    for key, value in pairs(obj) do\r\n        local key_str = tostring(key)\r\n        if type(value) == \"table\" then\r\n            print(formatting .. \"  \" .. key_str .. \" = \")\r\n            prettyPrintTable(value, indent + 1)\r\n        else\r\n            print(formatting .. \"  \" .. key_str .. \" = \" .. tostring(value))\r\n        end\r\n    end\r\n    print(formatting .. \"}\")\r\nend\r\n\r\n\r\n-- Get transform for a given tag and index\r\n    -- Requires GeneralConfig\r\n    function getTransformStruct(tag, index, baseTransform)\r\n        return {\r\n            position = vectorSum(\r\n                pos[tag](index or 1), \r\n                (baseTransform and baseTransform.position or {x=0,y=0,z=0})\r\n            ),\r\n            rotation = rot[tag],\r\n        }\r\n    end\nend)\n__bundle_register(\"src/Config/AtlasPortalButtons\", function(require, _LOADED, __bundle_register, __bundle_modules)\n\r\n\r\n-- Buttons\r\nbuttons = {\r\n    retry = {\r\n        click_function = \"retry\",\r\n        function_owner = self,\r\n        label          = \"Fix missing objects \\n and click me \\n to retry\",\r\n        position       = {0, 0, 2.6},\r\n        scale          = {1.0,   1.0, 2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 1000,\r\n        height         = 500,\r\n        font_size      = 110,\r\n        color          = hexToColor(\"#823030\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Place missing objects and retry\", \r\n    },\r\n    retrieve = {\r\n        click_function = \"retrieve\",\r\n        function_owner = self,\r\n        label          = \"→ Explore a Site\\nfrom the front.\",\r\n        position       = {-1.85, 0, -0.85},\r\n        scale          = {1.0,   1.0,   2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 725,\r\n        height         = 400,\r\n        font_size      = 77,\r\n        color          = hexToColor(\"#588087\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Retrieve a Site and all objects there from the front of the Atlas Box\", \r\n    },\r\n    retrieveBack = {\r\n        click_function = \"retrieveBack\",\r\n        function_owner = self,\r\n        label          = \"↓ Revisit this site from the back.\",\r\n        position       = {-1.85, 0, 0.25},\r\n        scale          = {1.0,   1.0,   2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 725,\r\n        height         = 100,\r\n        font_size      = 50,\r\n        color          = hexToColor(\"#588087\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Retrieve a Site and all objects there from the back of the Atlas Box\", \r\n    },\r\n    ruinSites = {\r\n        click_function = \"ruinSites\",\r\n        function_owner = self,\r\n        label          = \"Ruin and\\n Unify Sites\",\r\n        position       = {1.85, 0, -0.85},\r\n        scale          = {1.0,   1.0,   2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 725,\r\n        height         = 400,\r\n        font_size      = 77,\r\n        color          = hexToColor(\"#588087\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Ruin Unpreserved Sites from Right to Left\", \r\n    },\r\n    setup = {\r\n        click_function = \"chronicleSetup\",\r\n        function_owner = self,\r\n        label          = \"Setup Initial\\nAtlas Box, Sites, \\n& World Deck\",\r\n        position       = {0, 0, 2.6},\r\n        scale          = {1.0,   1.0, 2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 1000,\r\n        height         = 500,\r\n        font_size      = 130,\r\n        color          = hexToColor(\"#4a915d\"),\r\n        font_color     = {1, 1, 1, 1},\r\n        tooltip        = \"Set Up the Atlas Box for a new Chronicle\", \r\n    },\r\n    spawnRelics = {\r\n        click_function = \"spawnRelics\",\r\n        function_owner = self,\r\n        label          = \"Retrieve Lost Relics\",\r\n        position       = {0, 0, 2.1},\r\n        scale          = {1.0,   1.0, 2.0 },\r\n        rotation       = {0, 0, 0},\r\n        width          = 1050,\r\n        height         = 250,\r\n        font_size      = 80,\r\n        font_color     = hexToColor(\"#e6bb4a\"),\r\n        color          = hexToColor(\"#8a363b\"),\r\n        tooltip        = \"Retrieve 10 relics from the Atlas Box if you run out\", \r\n    }\r\n}\nend)\n__bundle_register(\"src/Config/GeneralConfig\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- GUIDs for needed items. IF SOMETHING IS BROKEN LIKELY THESE ARE NO LONGER CORRECT\r\nGUIDs = {\r\n    atlasBox = \"f8bd3c\",\r\n    -- edifices = \"1662f7\",\r\n    relicBag = \"c46336\",\r\n    -- shadowBag = \"1ce44a\",\r\n    siteBag = \"12dafe\",\r\n    table = \"4ee1f2\",\r\n    map = \"d5dacf\",\r\n    dispossessedBag = \"e52b07\",\r\n    archiveDecks = {\r\n        Arcane = \"a79848\",\r\n        Beast = \"d1f201\",\r\n        Discord = \"d40870\",\r\n        Hearth = \"31eab2\",\r\n        Nomad = \"6deb3d\",\r\n        Order = \"275175\"\r\n    },\r\n    foundations = {\r\n      deckSetup = '373c0c'\r\n    },\r\n    scriptingTrigger = '84ebee'\r\n}\r\n\r\n-- Tags to identify items\r\ntags = {\r\n    chronicleCreated = \"chronicleCreated\",\r\n    edifice = \"Edifice\",\r\n    relic = \"Relic\",\r\n    site = \"Site\",\r\n    unlocked = \"Unlocked\",\r\n    protected = \"Protected\",\r\n    debug = \"Debug\",\r\n    ancient = \"Ancient\",\r\n    card = \"Card\"\r\n}\r\n\r\n-- Name strings to use for Atlas Slots depending on their states\r\natlasSlotNames = {\r\n    empty = \"[Empty] Slot\",\r\n    full = \"[Full] Slot\"\r\n}\r\n\r\n-- Tables to track things on the portal\r\nportal = {\r\n    edifices = {},\r\n    relics = {},\r\n    sites = {},\r\n}\r\n\r\n-- Positions\r\npos = {\r\n    -- relative to site\r\n    denizen =       function(i) return {x = 5.35+3.3*i, y = 0.25, z = 0} end,\r\n    relic  =       function(i) return {x = 5.35+3.3*i, y = 0.25, z = 0} end,\r\n    -- relative to atlas portal\r\n    portal =        function(i) return {x = 0, y = 0.10, z = 0} end,\r\n    -- relative to map\r\n    dispossessed =  function(i) return {x = -117.15, y = 0.55, z = 29.15} end,\r\n    relicStack =    function(i) return {x = -19.7, y = 0.55,  z = -9.9} end,\r\n    site =          function(i)\r\n                        local sitePositions = {\r\n                            { x = -26.55, y = 0.21, z =  5.00 },\r\n                            { x = -26.55, y = 0.21, z = -0.75 },\r\n                            { x = -06.10, y = 0.21, z =  5.00 },\r\n                            { x = -06.10, y = 0.21, z = -0.75 },\r\n                            { x = -06.10, y = 0.21, z = -6.50 },\r\n                            { x =  14.85, y = 0.21, z =  5.00 },\r\n                            { x =  14.85, y = 0.21, z = -0.75 },\r\n                            { x =  14.85, y = 0.21, z = -6.50 }\r\n                        }\r\n                        return sitePositions[i]\r\n                    end,\r\n    worldDeck =     function(i) return {x = -14.53, y = 0.55, z = -9.9} end,\r\n}\r\n\r\n-- Rotations\r\nrot = {\r\n    dispossessed =  {x = 0,   y = 180,  z = 180},\r\n    denizen =       {x = 0, y = 180,   z = 0},\r\n    portal =        {x = 0,   y = 180, z = 0},\r\n    relic =         {x = 180, y = 0,   z = 0},\r\n    relicStack =    {x = 180, y = 0,   z = 0},\r\n    site =          {x = 0,   y = 180, z = 0},\r\n    worldDeck =     {x = 0,   y = 90,  z = 180},\r\n}\r\n\r\nsuits = {\"Arcane\",\"Beast\",\"Discord\",\"Hearth\",\"Nomad\",\"Order\"}\r\n\r\nsuitColors = {\r\n    Arcane = '#6f3788',\r\n    Beast = \"#a23723\",\r\n    Discord = \"#33190c\",\r\n    Hearth = \"#e54622\",\r\n    Nomad = \"#49a281\",\r\n    Order = \"#263f86\",\r\n  }\nend)\n__bundle_register(\"src/Utils/ColorUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"src/Utils/BidirectionalMap\")\r\n\r\n-- converts to and from oath color strings and rgb colors\r\nlocal oathColors = BidirectionalMap(\r\n  'Name', 'Color', \r\n  {\r\n    ['Red'] = Color.fromHex('F84713'),\r\n    ['Yellow'] = Color.fromHex('FFE600'),\r\n    ['Black'] = Color.fromHex('3F3F3F'),\r\n    ['Blue'] = Color.fromHex('36B4E6'),\r\n    ['Brown'] = Color.fromHex('B45D00'),\r\n    ['White'] = Color.fromHex('FFFFFF'),\r\n    ['Pink'] = Color.fromHex('E57BA6'),\r\n    ['Purple'] = Color.fromHex('CD41FF'),\r\n})\r\n\r\n-- converts to and from oath player colors, and TTS color names\r\nlocal TTSColorMap = BidirectionalMap(\r\n  'OathColor', 'TTSColor',\r\n  {\r\n  ['Red'] = 'Red',\r\n  ['Yellow'] = 'Yellow',\r\n  ['Black'] = 'Green', -- black can't be used because it's assigned to the gamemaster\r\n  ['Blue'] = 'Blue',\r\n  ['Brown'] = 'Brown',\r\n  ['White'] = 'White',\r\n  ['Pink'] = 'Pink',\r\n  ['Purple'] = 'Purple',\r\n})\r\n\r\nfunction ColorAsVector(color)\r\n  return Vector(color.r, color.g, color.b)\r\nend\r\n\r\n-- given any rgb color, find the closest oath color name\r\nfunction GetBestFitOathColor(color)\r\n  local shortestDistance = 1000000000\r\n  local foundColor = nil\r\n  local colorVector = ColorAsVector(color)\r\n  for colorName, oathColor in pairs(oathColors.NameToColor) do\r\n    local distance = colorVector:distance(ColorAsVector(oathColor))\r\n    if distance < shortestDistance then\r\n      shortestDistance = distance\r\n      foundColor = colorName\r\n    end\r\n  end\r\n  return foundColor\r\nend\r\n\r\n-- given any rgb color, pick a TTS player color for it\r\nfunction GetBestFitTTSColor(color)\r\n  return TTSColorMap.OathColorToTTSColor[GetBestFitOathColor(color)]\r\nend\r\n\r\n-- Function to convert hex color to Color object (added early to not break buttons store)\r\nfunction hexToColor(hex)\r\n  -- Remove the \"#\" if it exists\r\n  hex = hex:gsub(\"#\", \"\")\r\n\r\n  -- Convert each pair of hex digits to decimal and then to float\r\n  local r = tonumber(hex:sub(1, 2), 16) / 255\r\n  local g = tonumber(hex:sub(3, 4), 16) / 255\r\n  local b = tonumber(hex:sub(5, 6), 16) / 255\r\n\r\n  -- Return the RGB values as floats\r\n  return Color(r, g, b)\r\nend\r\n\nend)\n__bundle_register(\"src/Utils/BidirectionalMap\", function(require, _LOADED, __bundle_register, __bundle_modules)\nfunction BidirectionalMap(nameA, nameB, AToB)\r\n  local result = {\r\n    [nameA..'To'..nameB] = AToB,\r\n    [nameB..'To'..nameA] = {},\r\n  }\r\n  for A, B in pairs(AToB) do\r\n    result[nameB..'To'..nameA][B] = A\r\n  end\r\n\r\n  return result\r\nend\nend)\nreturn __bundle_require(\"Atlas Portal.804c02.lua\")",
      "LuaScriptState": "",
      "XmlUI": ""
    }
  ]
}