{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "79b934",
      "Name": "BlockSquare",
      "Transform": {
        "posX": 18.7664452,
        "posY": 1.49,
        "posZ": -8.905091,
        "rotX": 0.07987646,
        "rotY": 89.99998,
        "rotZ": 359.983124,
        "scaleX": 3.6,
        "scaleY": 0.0001,
        "scaleZ": 5.37
      },
      "Nickname": "World Deck Tile",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.0,
        "g": 0.0,
        "b": 0.0,
        "a": 0.390334457
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "-- Bundled by luabundle {\"rootModuleName\":\"World Deck Tile.79b934.lua\",\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"World Deck Tile.79b934.lua\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"src/WorldDeckTile\")\nend)\n__bundle_register(\"src/WorldDeckTile\", function(require, _LOADED, __bundle_register, __bundle_modules)\n\r\nlocal suits = {\"Arcane\",\"Beast\",\"Discord\",\"Hearth\",\"Nomad\",\"Order\"}\r\n\r\nlocal guids = {\r\n  Archive = {\r\n    Arcane = \"a79848\",\r\n    Beast = \"d1f201\",\r\n    Discord = \"d40870\",\r\n    Hearth = \"31eab2\",\r\n    Nomad = \"6deb3d\",\r\n    Order = \"275175\",\r\n  },\r\n  Foundations = {\r\n    DeckSetup = '32975d'\r\n  },\r\n  EdificesBag = \"1662f7\"\r\n}\r\n\r\nlocal suitColors = {\r\n  Arcane = '6f3788',\r\n  Beast = \"a23723\",\r\n  Discord = \"33190c\",\r\n  Hearth = \"e54622\",\r\n  Nomad = \"49a281\",\r\n  Order = \"263f86\",\r\n}\r\n\r\nlocal VisionBackURL = \"http://tts.ledergames.com/Oath/cards/3_2_0/cardbackVision.jpg\"\r\n\r\n\r\nlocal cachedWorldDeck = nil\r\nfunction FindWorldDeck()\r\n  if cachedWorldDeck and not cachedWorldDeck.isDestroyed() then\r\n    return cachedWorldDeck\r\n  end\r\n  local hitList = Physics.cast({\r\n    origin = self.getPosition(),\r\n    direction = vector(0, 1, 0),\r\n    type = 1\r\n  })\r\n  for _, hit_info in ipairs(hitList) do\r\n    if hit_info.hit_object.type == \"Deck\" then\r\n      cachedWorldDeck = hit_info.hit_object\r\n      return cachedWorldDeck\r\n    end\r\n  end\r\n  return nil\r\nend\r\n\r\nfunction onload(save_str)\r\n  CreateDeckSetupButtons()\r\n\r\n  if not FindWorldDeck() then\r\n    OnStartedWithoutDeck()\r\n  end\r\nend\r\n\r\n\r\n\r\nfunction OnStartedWithoutDeck()\r\n  self.clearButtons()\r\n  params = {\r\n      click_function = \"OnRandomizeNewDeck\",\r\n      function_owner = self,\r\n      label          = \"Randomize\\nNew Deck\",\r\n      position       = {0, 0.0001, 0},\r\n      rotation       = {0, 90, 0},\r\n      width          = 400,\r\n      height         = 400,\r\n      font_size      = 60,\r\n      color          = {0, 0, 0, 0},\r\n      font_color     = {0, 0, 0, 0},\r\n      tooltip        = \"Click to randomize a new deck\",\r\n  }\r\n  self.createButton(params)\r\nend\r\n\r\nfunction CreateDeckSetupButtons()\r\n  local deckSetupFoundation = getObjectFromGUID(guids.Foundations.DeckSetup)\r\n  deckSetupFoundation.clearButtons()\r\n  params = {\r\n      click_function = \"OnShuffleFairWorldDeck\",\r\n      function_owner = self,\r\n      label          = \"Automate\",\r\n      position       = {0, 0.5, 1.4},\r\n      rotation       = {0, 0, 0},\r\n      width          = 800,\r\n      height         = 200,\r\n      font_size      = 150,\r\n      color          = Color.fromHex('#E0E2E1E7'),\r\n      font_color     = Color.fromHex('#398c93'),\r\n      tooltip        = 'Click to automatically set up deck',\r\n  }\r\n  deckSetupFoundation.createButton(params)\r\n\r\n  params = {\r\n      click_function = \"OnShuffleUnfairWorldDeck\",\r\n      function_owner = self,\r\n      label          = \"Automate\",\r\n      position       = {0, -0.5, 1.4},\r\n      rotation       = {0, 0, 180},\r\n      width          = 800,\r\n      height         = 200,\r\n      font_size      = 150,\r\n      color          = Color.fromHex('#f1e8dfe7'),\r\n      font_color     = Color.fromHex('#be5639'),\r\n      tooltip        = 'Click to automatically set up deck',\r\n  }\r\n  deckSetupFoundation.createButton(params)\r\nend\r\n\r\n\r\n\r\n-- if a deck couldn't be found with the expected guids, this function can request it manually\r\nfunction RequestDeckGuid_Coroutine(deckName, player_color)\r\n  local message = \r\n    \"There was an error. Please [ffffff][i][b]ctrl+select[/b][/i][-] the [b][\"..\r\n    suitColors[deckName]..\"]\"..\r\n    deckName..\r\n    \"[-][/b] archive deck.\"\r\n\r\n  broadcastToColor(message, player_color, {r=0.8, g=0.8, b=0.8})\r\n  Player[player_color].clearSelectedObjects()\r\n\r\n  -- wait for player to select object\r\n  while (#Player[player_color].getSelectedObjects() ~= 1) do\r\n    coroutine.yield(0)\r\n  end\r\n\r\n  return Player[player_color].getSelectedObjects()[1].getGUID()\r\nend\r\n\r\nfunction GetArchiveCardDecks_Coroutine(player_color)\r\n  local result = {}\r\n  for deckName, guid in pairs(guids.Archive) do\r\n    result[deckName] = getObjectFromGUID(guid)\r\n    if result[deckName] == nil then\r\n      guids.Archive[deckName] = RequestDeckGuid_Coroutine(deckName, player_color)\r\n      result[deckName] = getObjectFromGUID(guids.Archive[deckName])\r\n    end\r\n  end\r\n\r\n  return result\r\nend\r\n\r\nfunction insertCardInDeck(deck, card, index)\r\n  local rotation = deck.getRotation()\r\n  local result = nil\r\n  if index > 1 then\r\n    local decks = deck.cut(deck.getQuantity()-(index-1))\r\n    result = group({decks[2], card, decks[1]})[1]\r\n  else\r\n    result = group({deck, card})[1]\r\n  end\r\n\r\n  -- cutting and grouping can cause the deck to be rotated. This fixes that.\r\n  result.setRotation(rotation)\r\n\r\n  return result\r\nend\r\n\r\n\r\nfunction FindAllVisions()\r\n  local result = {}\r\n  for _, object in ipairs(getAllObjects()) do\r\n    if object.type == 'Card' then\r\n      local cardData = object.getData()\r\n      local deckID = math.floor(cardData.CardID / 100)\r\n      if cardData.CustomDeck[deckID].BackURL == VisionBackURL then\r\n        table.insert(result, object) -- found vision outside deck\r\n      end\r\n    elseif object.type == 'Deck' then\r\n      local deckData = object.getData()\r\n      -- reverse iterate contained objects so that removing from the deck doesn't change indices\r\n      for i = #deckData.ContainedObjects, 1, -1 do\r\n        local info = deckData.ContainedObjects[i]\r\n        local deckID = math.floor(info.CardID / 100)\r\n        if deckData.CustomDeck[deckID].BackURL == VisionBackURL then\r\n          table.insert(result, object.takeObject({index=i-1, smooth=false}))\r\n        end\r\n      end\r\n    end\r\n  end\r\n  return result\r\nend\r\n\r\nfunction ShuffleTable(tbl)\r\n  for i = #tbl, 2, -1 do\r\n    local j = math.random(i)\r\n    tbl[i], tbl[j] = tbl[j], tbl[i]\r\n  end\r\n  return tbl\r\nend\r\n\r\n\r\n-- this will perform world deck setup on the 'A Fair Deck' foundation\r\nfunction OnShuffleFairWorldDeck(_, player_color, _)\r\n\r\n  -- find and shuffle visions\r\n  local visions = ShuffleTable(FindAllVisions())\r\n  if #visions ~= 5 then\r\n    broadcastToAll(\"Error: Could not find all 5 visions!\")\r\n    return\r\n  end\r\n  \r\n  -- find and shuffle world deck\r\n  local worldDeck = FindWorldDeck()\r\n  if worldDeck == nil then\r\n    broadcastToColor(\"World deck not found! Is this a new chronical? click the world deck slot to generate one.\", player_color, {r=0.8, g=0, b=0})\r\n    return\r\n  end\r\n  worldDeck.shuffle()\r\n\r\n  -- insert visions at random positions according to rules\r\n\r\n  -- two visions go in the first 12 slots\r\n  for i = 1, 2 do\r\n    local index = math.random(1, 10+i)\r\n    visions[i].tooltip = false\r\n    worldDeck = insertCardInDeck(worldDeck, visions[i], index)\r\n  end\r\n\r\n  -- three visions go between slots 13 and 30\r\n  for i = 3, 5 do\r\n    local index = math.random(13, 27+i)\r\n    visions[i].tooltip = false\r\n    worldDeck = insertCardInDeck(worldDeck, visions[i], index)\r\n  end\r\nend\r\n\r\n\r\n-- this will perform world deck setup on the 'A Fair Deck' foundation\r\nfunction OnShuffleUnfairWorldDeck(_, player_color, _)\r\n\r\n  -- find and shuffle visions\r\n  local visions = ShuffleTable(FindAllVisions())\r\n  if #visions ~= 5 then\r\n    broadcastToAll(\"Error: Could not find all 5 visions!\")\r\n    return\r\n  end\r\n  \r\n  -- find and shuffle world deck\r\n  local worldDeck = FindWorldDeck()\r\n  if worldDeck == nil then\r\n    broadcastToColor(\"World deck not found! Is this a new chronical? click the world deck slot to generate one.\", player_color, {r=0.8, g=0, b=0})\r\n    return\r\n  end\r\n  worldDeck.shuffle()\r\n\r\n  -- take one vision out and give it to a random player\r\n  local selectedVision = table.remove(visions, #visions)\r\n  local selectedPlayer = Player.getPlayers()[math.random(#Player.getPlayers())]\r\n  selectedVision.deal(1, selectedPlayer.color)\r\n\r\n  -- insert visions at random positions according to rules\r\n\r\n  -- two visions go in the first 16 slots\r\n  for i = 1, 2 do\r\n    local index = math.random(1, 14+i)\r\n    visions[i].tooltip = false\r\n    worldDeck = insertCardInDeck(worldDeck, visions[i], index)\r\n  end\r\n\r\n  -- two visions go between slots 17 and 32\r\n  for i = 3, 4 do\r\n    local index = math.random(13, 30+i)\r\n    visions[i].tooltip = false\r\n    worldDeck = insertCardInDeck(worldDeck, visions[i], index)\r\n  end\r\nend\r\n\r\n\r\nfunction OnRandomizeNewDeck(_, player_color, _)\r\n\r\n  -- edifices bag is deleted by the atlas setup. if it still exists, the deck can't be made yet.\r\n  if (getObjectFromGUID(guids.EdificesBag) ~= nil) then\r\n    broadcastToColor(\"Set up the atlas box and organize the Edifices first!\", player_color, {r=0.8, g=0, b=0})\r\n    return\r\n  end\r\n\r\n  function helper_coroutine()\r\n\r\n    local decks = GetArchiveCardDecks_Coroutine(player_color)\r\n\r\n    -- TODO: pull edifices out of edifice bag and sort them by suit\r\n\r\n    -- add 9 cards from each suit\r\n    for _, suit in ipairs(suits) do\r\n      local deck = decks[suit]\r\n      local prevRotation = deck.getRotation()\r\n      deck.setRotation({prevRotation.x,prevRotation.y,180})\r\n      deck.shuffle()\r\n      for i=1, 9 do\r\n        deck.takeObject({\r\n          position = self.getPosition() + vector(0, 1, 0),\r\n          rotation = {self.getRotation().x, self.getRotation().y, 180},\r\n          smooth = false\r\n        })\r\n      end\r\n    end\r\n\r\n    -- wait 30 frames to give the cards time to settle into a single deck\r\n    for i=1, 30 do\r\n      coroutine.yield(0)\r\n    end\r\n\r\n    FindWorldDeck().setName(\"World Deck\")\r\n\r\n    return 1\r\n  end\r\n  startLuaCoroutine(self, \"helper_coroutine\")\r\nend\r\n\r\n\nend)\nreturn __bundle_require(\"World Deck Tile.79b934.lua\")",
      "LuaScriptState": "",
      "XmlUI": "",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": -5.298181E-07,
            "y": 0.499999523,
            "z": -5.3277904E-06
          },
          "Rotation": {
            "x": -3.68252273E-08,
            "y": -0.00167339633,
            "z": 1.3385E-07
          }
        }
      ]
    }
  ]
}